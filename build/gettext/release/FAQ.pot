# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Nosy
# This file is distributed under the same license as the docutils-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: docutils-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-22 20:48+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/release/FAQ.rst:10
msgid "Docutils FAQ (Frequently Asked Questions)"
msgstr ""

#: ../../source/release/FAQ.rst:0
msgid "Date"
msgstr ""

#: ../../source/release/FAQ.rst:12
msgid "$Date: 2016-02-26 22:40:17 +0100 (Fr, 26. Feb 2016) $"
msgstr ""

#: ../../source/release/FAQ.rst:0
msgid "Revision"
msgstr ""

#: ../../source/release/FAQ.rst:13
msgid "$Revision: 7934 $"
msgstr ""

#: ../../source/release/FAQ.rst:0
msgid "Web site"
msgstr ""

#: ../../source/release/FAQ.rst:14
msgid "http://docutils.sourceforge.net/"
msgstr ""

#: ../../source/release/FAQ.rst:0
msgid "Copyright"
msgstr ""

#: ../../source/release/FAQ.rst:15
msgid "This document has been placed in the public domain."
msgstr ""

#: ../../source/release/FAQ.rst:16
msgid "目录"
msgstr ""

#: ../../source/release/FAQ.rst:21
msgid "This is a work in progress.  If you are reading a local copy, the `master copy`_ might be newer.  This document uses are relative links; if they don't work, please use the `master copy`_."
msgstr ""

#: ../../source/release/FAQ.rst:25
msgid "Please feel free to ask questions and/or provide answers; send email to the `Docutils-users`_ mailing list.  Project members should feel free to edit the source text file directly."
msgstr ""

#: ../../source/release/FAQ.rst:36
msgid "Docutils"
msgstr ""

#: ../../source/release/FAQ.rst:39
msgid "What is Docutils?"
msgstr ""

#: ../../source/release/FAQ.rst:41
msgid "Docutils_ is a system for processing plaintext documentation into useful formats, such as HTML, XML, and LaTeX.  It supports multiple types of input, such as standalone files (implemented), inline documentation from Python modules and packages (under development), `PEPs (Python Enhancement Proposals)`_ (implemented), and others as discovered."
msgstr ""

#: ../../source/release/FAQ.rst:48
msgid "The Docutils distribution consists of:"
msgstr ""

#: ../../source/release/FAQ.rst:50
msgid "a library (the \"docutils\" package), which `can be used by client code`_;"
msgstr ""

#: ../../source/release/FAQ.rst:52
msgid "several `front-end tools`_ (such as ``rst2html.py``, which converts reStructuredText input into HTML output);"
msgstr ""

#: ../../source/release/FAQ.rst:54
msgid "a `test suite`_; and"
msgstr ""

#: ../../source/release/FAQ.rst:55
msgid "extensive documentation_."
msgstr ""

#: ../../source/release/FAQ.rst:57
msgid "For an overview of the Docutils project implementation, see `PEP 258`_, \"Docutils Design Specification\"."
msgstr ""

#: ../../source/release/FAQ.rst:60
msgid "Docutils is implemented in Python_."
msgstr ""

#: ../../source/release/FAQ.rst:74
msgid "Why is it called \"Docutils\"?"
msgstr ""

#: ../../source/release/FAQ.rst:76
msgid "Docutils is short for \"Python Documentation Utilities\".  The name \"Docutils\" was inspired by \"Distutils\", the Python Distribution Utilities architected by Greg Ward, a component of Python's standard library."
msgstr ""

#: ../../source/release/FAQ.rst:81
msgid "The earliest known use of the term \"docutils\" in a Python context was a `fleeting reference`__ in a message by Fred Drake on 1999-12-02 in the Python Doc-SIG mailing list.  It was suggested `as a project name`__ on 2000-11-27 on Doc-SIG, again by Fred Drake, in response to a question from Tony \"Tibs\" Ibbs: \"What do we want to *call* this thing?\".  This was shortly after David Goodger first `announced reStructuredText`__ on Doc-SIG."
msgstr ""

#: ../../source/release/FAQ.rst:89
msgid "Tibs used the name \"Docutils\" for `his effort`__ \"to document what the Python docutils package should support, with a particular emphasis on documentation strings\".  Tibs joined the current project (and its predecessors) and graciously donated the name."
msgstr ""

#: ../../source/release/FAQ.rst:94
msgid "For more history of reStructuredText and the Docutils project, see `An Introduction to reStructuredText`_."
msgstr ""

#: ../../source/release/FAQ.rst:97
msgid "Please note that the name is \"Docutils\", not \"DocUtils\" or \"Doc-Utils\" or any other variation.  It is pronounced as in \"DOCumentation UTILitieS\", with emphasis on the first syllable."
msgstr ""

#: ../../source/release/FAQ.rst:109
msgid "Is there a GUI authoring environment for Docutils?"
msgstr ""

#: ../../source/release/FAQ.rst:111
msgid "DocFactory_ is under development.  It uses wxPython and looks very promising."
msgstr ""

#: ../../source/release/FAQ.rst:119
msgid "What is the status of the Docutils project?"
msgstr ""

#: ../../source/release/FAQ.rst:121
msgid "Although useful and relatively stable, Docutils is experimental code, with APIs and architecture subject to change."
msgstr ""

#: ../../source/release/FAQ.rst:124
msgid "Our highest priority is to fix bugs as they are reported.  So the latest code from the repository_ (or the snapshots_) is almost always the most stable (bug-free) as well as the most featureful."
msgstr ""

#: ../../source/release/FAQ.rst:130
msgid "What is the Docutils project release policy?"
msgstr ""

#: ../../source/release/FAQ.rst:132
msgid "It's \"release early & often\".  We also have automatically-generated snapshots_ which always contain the latest code from the repository_. As the project matures, we may formalize on a stable/development-branch scheme, but we're not using anything like that yet."
msgstr ""

#: ../../source/release/FAQ.rst:143
msgid "reStructuredText"
msgstr ""

#: ../../source/release/FAQ.rst:146
msgid "What is reStructuredText?"
msgstr ""

#: ../../source/release/FAQ.rst:148
msgid "reStructuredText_ is an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax and parser system.  The reStructuredText parser is a component of Docutils_.  reStructuredText is a revision and reinterpretation of the StructuredText_ and Setext_ lightweight markup systems."
msgstr ""

#: ../../source/release/FAQ.rst:154
msgid "If you are reading this on the web, you can see for yourself.  `The source for this FAQ <FAQ.txt>`_ is written in reStructuredText; open it in another window and compare them side by side."
msgstr ""

#: ../../source/release/FAQ.rst:158
msgid "`A ReStructuredText Primer`_ and the `Quick reStructuredText`_ user reference are a good place to start.  The `reStructuredText Markup Specification`_ is a detailed technical specification."
msgstr ""

#: ../../source/release/FAQ.rst:173
msgid "Why is it called \"reStructuredText\"?"
msgstr ""

#: ../../source/release/FAQ.rst:175
msgid "The name came from a combination of \"StructuredText\", one of reStructuredText's predecessors, with \"re\": \"revised\", \"reworked\", and \"reinterpreted\", and as in the ``re.py`` regular expression module. For a detailed history of reStructuredText and the Docutils project, see `An Introduction to reStructuredText`_."
msgstr ""

#: ../../source/release/FAQ.rst:181
msgid "\"reStructuredText\" is **ONE** word, *not two!*"
msgstr ""

#: ../../source/release/FAQ.rst:185
msgid "What's the standard abbreviation for \"reStructuredText\"?"
msgstr ""

#: ../../source/release/FAQ.rst:187
msgid "\"RST\" and \"ReST\" (or \"reST\") are both acceptable.  Care should be taken with capitalization, to avoid confusion with \"REST__\", an acronym for \"Representational State Transfer\"."
msgstr ""

#: ../../source/release/FAQ.rst:191
msgid "The abbreviations \"reSTX\" and \"rSTX\"/\"rstx\" should **not** be used; they overemphasize reStructuredText's precedessor, Zope's StructuredText."
msgstr ""

#: ../../source/release/FAQ.rst:199
msgid "What's the standard filename extension for a reStructuredText file?"
msgstr ""

#: ../../source/release/FAQ.rst:201
msgid "It's \".txt\".  Some people would like to use \".rest\" or \".rst\" or \".restx\", but why bother?  ReStructuredText source files are meant to be readable as plaintext, and most operating systems already associate \".txt\" with text files.  Using a specialized filename extension would require that users alter their OS settings, which is something that many users will not be willing or able to do."
msgstr ""

#: ../../source/release/FAQ.rst:208
msgid "Also see `What's the official MIME type for reStructuredText data?`_"
msgstr ""

#: ../../source/release/FAQ.rst:212
msgid "Are there any reStructuredText editor extensions?"
msgstr ""

#: ../../source/release/FAQ.rst:214
msgid "See `Editor Support for reStructuredText`__."
msgstr ""

#: ../../source/release/FAQ.rst:220
msgid "How can I indicate the document title?  Subtitle?"
msgstr ""

#: ../../source/release/FAQ.rst:222
msgid "A uniquely-adorned section title at the beginning of a document is treated specially, as the document title.  Similarly, a uniquely-adorned section title immediately after the document title becomes the document subtitle.  For example::"
msgstr ""

#: ../../source/release/FAQ.rst:235
msgid "Counterexample::"
msgstr ""

#: ../../source/release/FAQ.rst:245
msgid "Another counterexample::"
msgstr ""

#: ../../source/release/FAQ.rst:259
msgid "How can I represent esoteric characters (e.g. character entities) in a document?"
msgstr ""

#: ../../source/release/FAQ.rst:261
msgid "For example, say you want an em-dash (XML character entity &mdash;, Unicode character U+2014) in your document: use a real em-dash. Insert concrete characters (e.g. type a *real* em-dash) into your input file, using whatever encoding suits your application, and tell Docutils the input encoding.  Docutils uses Unicode internally, so the em-dash character is a real em-dash internally."
msgstr ""

#: ../../source/release/FAQ.rst:268
msgid "Emacs users should refer to the `Emacs Support for reStructuredText`__ document.  Tips for other editors are welcome."
msgstr ""

#: ../../source/release/FAQ.rst:273
msgid "ReStructuredText has no character entity subsystem; it doesn't know anything about XML charents.  To Docutils, \"&mdash;\" in input text is 7 discrete characters; no interpretation happens.  When writing HTML, the \"&\" is converted to \"&amp;\", so in the raw output you'd see \"&amp;mdash;\".  There's no difference in interpretation for text inside or outside inline literals or literal blocks -- there's no character entity interpretation in either case."
msgstr ""

#: ../../source/release/FAQ.rst:281
msgid "If you can't use a Unicode-compatible encoding and must rely on 7-bit ASCII, there is a workaround.  New in Docutils 0.3.10 is a set of `Standard Substitution Definition Sets`_, which provide equivalents of XML & HTML character entity sets as substitution definitions.  For example, the Japanese yen currency symbol can be used as follows::"
msgstr ""

#: ../../source/release/FAQ.rst:291
msgid "For earlier versions of Docutils, equivalent files containing character entity set substitution definitions using the \"unicode_\" directive `are available`_.  Please read the `description and instructions`_ for use.  Thanks to David Priest for the original idea."
msgstr ""

#: ../../source/release/FAQ.rst:296
msgid "If you insist on using XML-style charents, you'll have to implement a pre-processing system to convert to UTF-8 or something.  That introduces complications though; you can no longer *write* about charents naturally; instead of writing \"&mdash;\" you'd have to write \"&amp;mdash;\"."
msgstr ""

#: ../../source/release/FAQ.rst:302
msgid "For the common case of long dashes, you might also want to insert the following substitution definitons into your document (both of them are using the \"unicode_\" directive)::"
msgstr ""

#: ../../source/release/FAQ.rst:314
msgid "Now you can write dashes using pure ASCII: \"``foo |--| bar; foo |---| bar``\", rendered as \"foo |--| bar; foo |---| bar\".  (Note that Mozilla and Firefox may render this incorrectly.)  The ``:trim:`` option for the em dash is necessary because you cannot write \"``foo|---|bar``\"; thus you need to add spaces (\"``foo |---| bar``\") and advise the reStructuredText parser to trim the spaces."
msgstr ""

#: ../../source/release/FAQ.rst:331
msgid "How can I generate backticks using a Scandinavian keyboard?"
msgstr ""

#: ../../source/release/FAQ.rst:333
msgid "The use of backticks in reStructuredText is a bit awkward with Scandinavian keyboards, where the backtick is a \"dead\" key.  To get one ` character one must press SHIFT-` + SPACE."
msgstr ""

#: ../../source/release/FAQ.rst:337
msgid "Unfortunately, with all the variations out there, there's no way to please everyone.  For Scandinavian programmers and technical writers, this is not limited to reStructuredText but affects many languages and environments."
msgstr ""

#: ../../source/release/FAQ.rst:342
msgid "Possible solutions include"
msgstr ""

#: ../../source/release/FAQ.rst:344
msgid "If you have to input a lot of backticks, simply type one in the normal/awkward way, select it, copy and then paste the rest (CTRL-V is a lot faster than SHIFT-` + SPACE)."
msgstr ""

#: ../../source/release/FAQ.rst:348
msgid "Use keyboard macros."
msgstr ""

#: ../../source/release/FAQ.rst:350
msgid "Remap the keyboard.  The Scandinavian keyboard layout is awkward for other programming/technical characters too; for example, []{} etc. are a bit awkward compared to US keyboards."
msgstr ""

#: ../../source/release/FAQ.rst:354
msgid "According to Axel Kollmorgen,"
msgstr ""

#: ../../source/release/FAQ.rst:356
msgid "Under Windows, you can use the `Microsoft Keyboard Layout Creator <http://www.microsoft.com/globaldev/tools/msklc.mspx>`__ to easily map the backtick key to a real backtick (no dead key). took me five minutes to load my default (german) keyboard layout, untick \"Dead Key?\" from the backtick key properties (\"in all shift states\"), \"build dll and setup package\", install the generated .msi, and add my custom keyboard layout via Control Panel > Regional and Language Options > Languages > Details > Add Keyboard layout (and setting it as default \"when you start your computer\")."
msgstr ""

#: ../../source/release/FAQ.rst:367
msgid "Use a virtual/screen keyboard or character palette, such as:"
msgstr ""

#: ../../source/release/FAQ.rst:369
msgid "`Web-based keyboards <http://keyboard.lab.co.il/>`__ (IE only unfortunately)."
msgstr ""

#: ../../source/release/FAQ.rst:371
msgid "Windows: `Click-N-Type <http://www.lakefolks.org/cnt/>`__."
msgstr ""

#: ../../source/release/FAQ.rst:372
msgid "Mac OS X: the Character Palette can store a set of favorite characters for easy input.  Open System Preferences, International, Input Menu tab, enable \"Show input menu in menu bar\", and be sure that Character Palette is enabled in the list."
msgstr ""

#: ../../source/release/FAQ.rst:377
msgid "If anyone knows of other/better solutions, please `let us know`_."
msgstr ""

#: ../../source/release/FAQ.rst:381
msgid "Are there any tools for HTML/XML-to-reStructuredText?  (Round-tripping)"
msgstr ""

#: ../../source/release/FAQ.rst:383
msgid "People have tossed the idea around, and some implementations of reStructuredText-generating tools can be found in the `Docutils Link List`_."
msgstr ""

#: ../../source/release/FAQ.rst:387
msgid "There's no reason why reStructuredText should not be round-trippable to/from XML; any technicalities which prevent round-tripping would be considered bugs.  Whitespace would not be identical, but paragraphs shouldn't suffer.  The tricky parts would be the smaller details, like links and IDs and other bookkeeping."
msgstr ""

#: ../../source/release/FAQ.rst:393
msgid "For HTML, true round-tripping may not be possible.  Even adding lots of extra \"class\" attributes may not be enough.  A \"simple HTML\" to RST filter is possible -- for some definition of \"simple HTML\" -- but HTML is used as dumb formatting so much that such a filter may not be particularly useful.  An 80/20 approach should work though: build a tool that does 80% of the work automatically, leaving the other 20% for manual tweaks."
msgstr ""

#: ../../source/release/FAQ.rst:405
msgid "Are there any Wikis that use reStructuredText syntax?"
msgstr ""

#: ../../source/release/FAQ.rst:407
msgid "There are several, with various degrees of completeness.  With no implied endorsement or recommendation, and in no particular order:"
msgstr ""

#: ../../source/release/FAQ.rst:410
msgid "`Ian Bicking's experimental code <http://docutils.sf.net/sandbox/ianb/wiki/Wiki.py>`__"
msgstr ""

#: ../../source/release/FAQ.rst:413
msgid "`MoinMoin <http://moinmoin.wikiwikiweb.de/>`__ has some support; `here's a sample <http://moinmoin.wikiwikiweb.de/RestSample>`__"
msgstr ""

#: ../../source/release/FAQ.rst:416
msgid "Zope-based `Zwiki <http://zwiki.org/>`__"
msgstr ""

#: ../../source/release/FAQ.rst:418
msgid "Zope3-based Zwiki (in the Zope 3 source tree as ``zope.products.zwiki``)"
msgstr ""

#: ../../source/release/FAQ.rst:421
msgid "`StikiWiki <http://mithrandr.moria.org/code/stikiwiki/>`__"
msgstr ""

#: ../../source/release/FAQ.rst:423
msgid "`Trac <http://trac.edgewall.com//>`__ `supports using reStructuredText <http://trac.edgewall.com//wiki/WikiRestructuredText>`__ as an alternative to wiki markup. This includes support for `TracLinks <http://trac.edgewall.com//wiki/TracLinks>`__ from within RST text via a custom RST reference-directive or, even easier, an interpreted text role 'trac'"
msgstr ""

#: ../../source/release/FAQ.rst:431
msgid "Please `let us know`_ of any other reStructuredText Wikis."
msgstr ""

#: ../../source/release/FAQ.rst:440
msgid "Are there any Weblog (Blog) projects that use reStructuredText syntax?"
msgstr ""

#: ../../source/release/FAQ.rst:442
msgid "With no implied endorsement or recommendation, and in no particular order:"
msgstr ""

#: ../../source/release/FAQ.rst:445
msgid "`Firedrop <http://www.voidspace.org.uk/python/firedrop2/>`__"
msgstr ""

#: ../../source/release/FAQ.rst:446
msgid "`PyBloxsom <http://pyblosxom.sourceforge.net/>`__"
msgstr ""

#: ../../source/release/FAQ.rst:447
msgid "`Lino WebMan <http://lino.sourceforge.net/webman.html>`__"
msgstr ""

#: ../../source/release/FAQ.rst:448
msgid "`Pelican <http://blog.getpelican.com/>`__ (also  listed `on PyPi <http://pypi.python.org/pypi/pelican>`__)"
msgstr ""

#: ../../source/release/FAQ.rst:451
msgid "Please `let us know`_ of any other reStructuredText Blogs."
msgstr ""

#: ../../source/release/FAQ.rst:457
msgid "How should I mark up lists?"
msgstr ""

#: ../../source/release/FAQ.rst:459
msgid "Bullet_ & enumerated_ list markup is very intuitive but there are 2 points that must be noted:"
msgstr ""

#: ../../source/release/FAQ.rst:465
msgid "Lists should **not** be indented.  This is correct::"
msgstr ""

#: ../../source/release/FAQ.rst:476
msgid "while this is probably incorrect::"
msgstr ""

#: ../../source/release/FAQ.rst:487
msgid "The extra indentation (of the list containing items 1.1 and 1.2) is recognized as a block quote.  This is usually not what you mean and it causes the list in the output to be indented too much."
msgstr ""

#: ../../source/release/FAQ.rst:491
msgid "There **must** be blank lines around list items, except between items of the same level, where blank lines are optional.  The example above shows this."
msgstr ""

#: ../../source/release/FAQ.rst:495
msgid "Note that formatting of the *output* is independent of the input, and is decided by the writer and the stylesheet.  For instance, lists *are* indented in HTML output by default.  See `How are lists formatted in HTML?`_ for details."
msgstr ""

#: ../../source/release/FAQ.rst:502
msgid "Could lists be indented without generating block quotes?"
msgstr ""

#: ../../source/release/FAQ.rst:504
msgid "Some people like to write lists with indentation but don't intend a blockquote context.  There has been a lot of discussion about allowing this in reStructuredText, but there are some issues that would need to be resolved before it could be implemented.  There is a summary of the issues and pointers to the discussions in `the to-do list`__."
msgstr ""

#: ../../source/release/FAQ.rst:514
msgid "Could the requirement for blank lines around lists be relaxed?"
msgstr ""

#: ../../source/release/FAQ.rst:516
msgid "Short answer: no."
msgstr ""

#: ../../source/release/FAQ.rst:518
msgid "In reStructuredText, it would be impossible to unambigously mark up and parse lists without blank lines before and after.  Deeply nested lists may look ugly with so many blank lines, but it's a price we pay for unambiguous markup.  Some other plaintext markup systems do not require blank lines in nested lists, but they have to compromise somehow, either accepting ambiguity or requiring extra complexity. For example, `Epytext <http://epydoc.sf.net/epytext.html#list>`__ does not require blank lines around lists, but it does require that lists be indented and that ambiguous cases be escaped."
msgstr ""

#: ../../source/release/FAQ.rst:530
msgid "How can I include mathematical equations in documents?"
msgstr ""

#: ../../source/release/FAQ.rst:532
msgid "Use the `math directive`_ and `math role`_, available since Docutils 0.8."
msgstr ""

#: ../../source/release/FAQ.rst:539
msgid "Is nested inline markup possible?"
msgstr ""

#: ../../source/release/FAQ.rst:541
msgid "Not currently, no.  It's on the `to-do list`__ (`details here`__), and hopefully will be part of the reStructuredText parser soon.  At that time, markup like this will become possible::"
msgstr ""

#: ../../source/release/FAQ.rst:551
msgid "There are workarounds, but they are either convoluted or ugly or both. They are not recommended."
msgstr ""

#: ../../source/release/FAQ.rst:554
msgid "Inline markup can be combined with hyperlinks using `substitution definitions`__ and references__ with the `\"replace\" directive`__. For example::"
msgstr ""

#: ../../source/release/FAQ.rst:563
msgid "It is not possible for just a portion of the replacement text to be a hyperlink; it's the entire replacement text or nothing."
msgstr ""

#: ../../source/release/FAQ.rst:570
msgid "The `\"raw\" directive`__ can be used to insert raw HTML into HTML output::"
msgstr ""

#: ../../source/release/FAQ.rst:581
msgid "Raw LaTeX is supported for LaTeX output, etc."
msgstr ""

#: ../../source/release/FAQ.rst:587
msgid "How to indicate a line break or a significant newline?"
msgstr ""

#: ../../source/release/FAQ.rst:589
msgid "`Line blocks`__ are designed for address blocks, verse, and other cases where line breaks are significant and must be preserved.  Unlike literal blocks, the typeface is not changed, and inline markup is recognized.  For example::"
msgstr ""

#: ../../source/release/FAQ.rst:610
msgid "Here's a workaround for manually inserting explicit line breaks in HTML output::"
msgstr ""

#: ../../source/release/FAQ.rst:623
msgid "A URL containing asterisks doesn't work.  What to do?"
msgstr ""

#: ../../source/release/FAQ.rst:625
msgid "Asterisks are valid URL characters (see :RFC:`2396`), sometimes used in URLs.  For example::"
msgstr ""

#: ../../source/release/FAQ.rst:630
msgid "Unfortunately, the parser thinks the asterisks are indicating emphasis.  The slashes serve as delineating punctuation, allowing the asterisks to be recognized as markup.  The example above is separated by the parser into a truncated URL, an emphasized word, and some regular text::"
msgstr ""

#: ../../source/release/FAQ.rst:640
msgid "To turn off markup recognition, use a backslash to escape at least the first asterisk, like this::"
msgstr ""

#: ../../source/release/FAQ.rst:645
msgid "Escaping the second asterisk doesn't hurt, but it isn't necessary."
msgstr ""

#: ../../source/release/FAQ.rst:649
msgid "How can I make a literal block with *some* formatting?"
msgstr ""

#: ../../source/release/FAQ.rst:651
msgid "Use the `parsed-literal`_ directive."
msgstr ""

#: ../../source/release/FAQ.rst:655
msgid "Scenario: a document contains some source code, which calls for a literal block to preserve linebreaks and whitespace.  But part of the source code should be formatted, for example as emphasis or as a hyperlink.  This calls for a *parsed* literal block::"
msgstr ""

#: ../../source/release/FAQ.rst:664
msgid "The emphasis (``*tricky*``) and footnote reference (``[1]_``) will be parsed."
msgstr ""

#: ../../source/release/FAQ.rst:669
msgid "Can reStructuredText be used for web or generic templating?"
msgstr ""

#: ../../source/release/FAQ.rst:671
msgid "Docutils and reStructuredText can be used with or as a component of a templating system, but they do not themselves include templating functionality.  Templating should simply be left to dedicated templating systems.  Users can choose a templating system to apply to their reStructuredText documents as best serves their interests."
msgstr ""

#: ../../source/release/FAQ.rst:677
msgid "There are many good templating systems for Python (ht2html_, YAPTU_, Quixote_'s PTL, Cheetah_, etc.; see this non-exhaustive list of `some other templating systems`_), and many more for other languages, each with different approaches.  We invite you to try several and find one you like.  If you adapt it to use Docutils/reStructuredText, please consider contributing the code to Docutils or `let us know`_ and we'll keep a list here."
msgstr ""

#: ../../source/release/FAQ.rst:685
msgid "One reST-specific web templating system is `rest2web <http://www.voidspace.org.uk/python/rest2web>`_, a tool for automatically building websites, or parts of websites."
msgstr ""

#: ../../source/release/FAQ.rst:699
msgid "How can I mark up a FAQ or other list of questions & answers?"
msgstr ""

#: ../../source/release/FAQ.rst:701
msgid "There is no specific syntax for FAQs and Q&A lists.  Here are two options:"
msgstr ""

#: ../../source/release/FAQ.rst:704
msgid "For a FAQ (Frequently Asked Questions, usually with answers), a convenient way to mark up the questions is as section titles, with the answer(s) as section content.  This document is marked up in this way."
msgstr ""

#: ../../source/release/FAQ.rst:709
msgid "The advantages of using section titles for questions are: sections can be numbered automatically, and a table of contents can be generated automatically.  One limitation of this format is that questions must fit on one line (section titles may not wrap, in the source text).  For very long questions, the title may be a summary of the question, with the full question in the section body."
msgstr ""

#: ../../source/release/FAQ.rst:716
msgid "Field lists work well as Q&A lists::"
msgstr ""

#: ../../source/release/FAQ.rst:723
msgid "In order to separate questions, lists can be used:"
msgstr ""

#: ../../source/release/FAQ.rst:0
#: ../../source/release/FAQ.rst:0
msgid "Q"
msgstr ""

#: ../../source/release/FAQ.rst:725
msgid "What kind of question can we put here?"
msgstr ""

#: ../../source/release/FAQ.rst:0
#: ../../source/release/FAQ.rst:0
#: ../../source/release/FAQ.rst:0
#: ../../source/release/FAQ.rst:0
msgid "A"
msgstr ""

#: ../../source/release/FAQ.rst:727
msgid "Any kind we like!"
msgstr ""

#: ../../source/release/FAQ.rst:729
msgid "How many answers can a question have?"
msgstr ""

#: ../../source/release/FAQ.rst:730
msgid "It can have one,"
msgstr ""

#: ../../source/release/FAQ.rst:731
msgid "or more."
msgstr ""

#: ../../source/release/FAQ.rst:0
msgid "A3"
msgstr ""

#: ../../source/release/FAQ.rst:732
msgid "Answers can be numbered like this."
msgstr ""

#: ../../source/release/FAQ.rst:733
msgid "Or like this."
msgstr ""

#: ../../source/release/FAQ.rst:734
msgid "We're flexible!"
msgstr ""

#: ../../source/release/FAQ.rst:736
msgid "If you don't want to number or otherwise mark questions, you can use an empty comment between individual field lists to separate them::"
msgstr ""

#: ../../source/release/FAQ.rst:752
msgid "Can I produce documents in right-to-left languages?"
msgstr ""

#: ../../source/release/FAQ.rst:754
msgid "Languages written from right to left, such as Arabic and Hebrew, must be reordered according to the `Unicode Bidi Algorithm`_.  This requires support from the editor and special markup in the output format."
msgstr ""

#: ../../source/release/FAQ.rst:759
msgid "The source format of reStructuredText is relatively bidi-friendly: most constructs are denoted by punctuation without intrusion of English and when you must write in English, it's usually on a separate line.  So any editor that auto-detects direction per-line (like gedit or geresh_) will suffice."
msgstr ""

#: ../../source/release/FAQ.rst:765
msgid "Moreover, it's possible to translate_ all reStructuredText keywords. This was not yet done for any RTL language, but when it is, it will be possible to write an RTL document with vitually no English.  This will allow reasonable use of editors limited to a single base direction for the whole document (like Notepad, Vim and text boxes in Firefox)."
msgstr ""

#: ../../source/release/FAQ.rst:775
msgid "The second problem is bidi markup of the output.  There is an almost transparent implicit solution for HTML:"
msgstr ""

#: ../../source/release/FAQ.rst:778
msgid "Grab http://cben-hacks.sourceforge.net/bidi/hibidi.py and http://cben-hacks.sourceforge.net/bidi/rst2html_hibidi.py. Put them both in the same directory and make them executable."
msgstr ""

#: ../../source/release/FAQ.rst:782
msgid "Use ``rst2html_hibidi.py`` instead of ``rst2html.py``."
msgstr ""

#: ../../source/release/FAQ.rst:784
msgid "It infers dir attributes in the HTML from the text.  It does it hierachically, giving much better results than usual.  You can still use LRM/RLM and LRE/RLE/PDF control codes to help it."
msgstr ""

#: ../../source/release/FAQ.rst:788
msgid "If you want the gory details: See the full theory_, and note the incomplete practice_ (this is still a partial implementation - but sufficient for most needs)."
msgstr ""

#: ../../source/release/FAQ.rst:795
msgid "There is also an explicit way to set directions through CSS and classes in the HTML:"
msgstr ""

#: ../../source/release/FAQ.rst:798
msgid "Copy ``default.css`` to a new file and add relevant parts of the following::"
msgstr ""

#: ../../source/release/FAQ.rst:818
msgid "Select this new stylesheet with ``--stylesheet=<file>`` or the stylesheet_ setting."
msgstr ""

#: ../../source/release/FAQ.rst:821
msgid "Now if you need to override the direction of some element (from a paragraph to a whole section), write::"
msgstr ""

#: ../../source/release/FAQ.rst:826
msgid "or::"
msgstr ""

#: ../../source/release/FAQ.rst:830
msgid "before it (see the class_ directive for details)."
msgstr ""

#: ../../source/release/FAQ.rst:832
msgid "To change the direction of some inline text fragment, you can use RLE/LRE/PDF control characters, or write ``:rtl:`RTL text``` / ``:ltr:`RTL text```.  To use the latter syntax, you must write this once at the beginning of your document::"
msgstr ""

#: ../../source/release/FAQ.rst:843
msgid "LaTeX is quite hard to implement (it doesn't support the bidi algorithm, so all direction changes - even numbers in RTL text - must be explicitly marked).  Other formats are more-or-less easy."
msgstr ""

#: ../../source/release/FAQ.rst:847
msgid "If you have any questions/problems/bugs related to bidi with docutils, ask `Beni Cherniavsky`__ directly or the `Docutils-users`_ mailing list."
msgstr ""

#: ../../source/release/FAQ.rst:855
msgid "What's the official MIME type for reStructuredText data?"
msgstr ""

#: ../../source/release/FAQ.rst:857
msgid "While there is no registered MIME type for reStructuredText, the \"official unofficial\" standard MIME type is \"text/x-rst\".  This was invented for the build system for PEPs (Python Enhancement Proposals), and it's used by the python.org web site build system."
msgstr ""

#: ../../source/release/FAQ.rst:862
msgid "(The \"x-\" prefix means it's an unregistered MIME type.)"
msgstr ""

#: ../../source/release/FAQ.rst:864
msgid "Also see `What's the standard filename extension for a reStructuredText file?`_"
msgstr ""

#: ../../source/release/FAQ.rst:869
msgid "HTML Writer"
msgstr ""

#: ../../source/release/FAQ.rst:872
msgid "What is the status of the HTML Writer?"
msgstr ""

#: ../../source/release/FAQ.rst:874
msgid "The HTML Writer module, ``docutils/writers/html4css1.py``, is a proof-of-concept reference implementation.  While it is a complete implementation, some aspects of the HTML it produces may be incompatible with older browsers or specialized applications (such as web templating). The sandbox has some alternative HTML writers, contributions are welcome."
msgstr ""

#: ../../source/release/FAQ.rst:882
msgid "What kind of HTML does it produce?"
msgstr ""

#: ../../source/release/FAQ.rst:884
msgid "It produces XHTML compatible with the `XHTML 1.0`_ specification.  A cascading stylesheet is required for proper viewing with a modern graphical browser.  Correct rendering of the HTML produced depends on the CSS support of the browser.  A general-purpose stylesheet, ``html4css1.css`` is provided with the code, and is embedded by default.  It is installed in the \"writers/html4css1/\" subdirectory within the Docutils package.  Use the ``--help`` command-line option to see the specific location on your machine."
msgstr ""

#: ../../source/release/FAQ.rst:897
msgid "What browsers are supported?"
msgstr ""

#: ../../source/release/FAQ.rst:899
msgid "No specific browser is targeted; all modern graphical browsers should work.  Some older browsers, text-only browsers, and browsers without full CSS support are known to produce inferior results.  Firefox, Safari, Mozilla (version 1.0 and up), Opera, and MS Internet Explorer (version 5.0 and up) are known to give good results.  Reports of experiences with other browsers are welcome."
msgstr ""

#: ../../source/release/FAQ.rst:908
msgid "Unexpected results from tools/rst2html.py: H1, H1 instead of H1, H2.  Why?"
msgstr ""

#: ../../source/release/FAQ.rst:910
msgid "Here's the question in full:"
msgstr ""

#: ../../source/release/FAQ.rst:912
msgid "I have this text::"
msgstr ""

#: ../../source/release/FAQ.rst:930
msgid "When I run it through tools/rst2html.py, I get unexpected results (below).  I was expecting H1, H2, then H3; instead, I get H1, H1, H2::"
msgstr ""

#: ../../source/release/FAQ.rst:952
msgid "What gives?"
msgstr ""

#: ../../source/release/FAQ.rst:954
msgid "Check the \"class\" attribute on the H1 tags, and you will see a difference.  The first H1 is actually ``<h1 class=\"title\">``; this is the document title, and the default stylesheet renders it centered. There can also be an ``<h2 class=\"subtitle\">`` for the document subtitle."
msgstr ""

#: ../../source/release/FAQ.rst:960
msgid "If there's only one highest-level section title at the beginning of a document, it is treated specially, as the document title.  (Similarly, a lone second-highest-level section title may become the document subtitle.)  See `How can I indicate the document title?  Subtitle?`_ for details.  Rather than use a plain H1 for the document title, we use ``<h1 class=\"title\">`` so that we can use H1 again within the document.  Why do we do this?  HTML only has H1-H6, so by making H1 do double duty, we effectively reserve these tags to provide 6 levels of heading beyond the single document title."
msgstr ""

#: ../../source/release/FAQ.rst:970
msgid "HTML is being used for dumb formatting for nothing but final display. A stylesheet *is required*, and one is provided; see `What kind of HTML does it produce?`_ above.  Of course, you're welcome to roll your own.  The default stylesheet provides rules to format ``<h1 class=\"title\">`` and ``<h2 class=\"subtitle\">`` differently from ordinary ``<h1>`` and ``<h2>``::"
msgstr ""

#: ../../source/release/FAQ.rst:983
msgid "If you don't want the top section heading to be interpreted as a title at all, disable the `doctitle_xform`_ setting (``--no-doc-title`` option).  This will interpret your document differently from the standard settings, which might not be a good idea.  If you don't like the reuse of the H1 in the HTML output, you can tweak the `initial_header_level`_ setting (``--initial-header-level`` option) -- but unless you match its value to your specific document, you might end up with bad HTML (e.g. H3 without H2)."
msgstr ""

#: ../../source/release/FAQ.rst:996
msgid "(Thanks to Mark McEahern for the question and much of the answer.)"
msgstr ""

#: ../../source/release/FAQ.rst:1000
msgid "How are lists formatted in HTML?"
msgstr ""

#: ../../source/release/FAQ.rst:1002
msgid "If list formatting looks strange, first check that you understand `list markup`__."
msgstr ""

#: ../../source/release/FAQ.rst:1007
msgid "By default, HTML browsers indent lists relative to their context. This follows a long tradition in browsers (but isn't so established in print).  If you don't like it, you should change the stylesheet."
msgstr ""

#: ../../source/release/FAQ.rst:1011
msgid "This is different from how lists look in reStructuredText source. Extra indentation in the source indicates a blockquote, resulting in too much indentation in the browser."
msgstr ""

#: ../../source/release/FAQ.rst:1015
msgid "A list item can contain multiple paragraphs etc.  In complex cases list items are separated by vertical space.  By default this spacing is omitted in \"simple\" lists.  A list is simple if every item contains a simple paragraph and/or a \"simple\" nested list.  For example:"
msgstr ""

#: ../../source/release/FAQ.rst:1021
msgid "text"
msgstr ""

#: ../../source/release/FAQ.rst:1023
#: ../../source/release/FAQ.rst:1025
#: ../../source/release/FAQ.rst:1026
#: ../../source/release/FAQ.rst:1028
msgid "simple"
msgstr ""

#: ../../source/release/FAQ.rst:1030
msgid "text after a nested list"
msgstr ""

#: ../../source/release/FAQ.rst:1032
msgid "multiple"
msgstr ""

#: ../../source/release/FAQ.rst:1034
msgid "paragraphs"
msgstr ""

#: ../../source/release/FAQ.rst:1036
msgid "In this example the nested lists are simple (and should appear compacted) but the outer list is not."
msgstr ""

#: ../../source/release/FAQ.rst:1039
msgid "If you want all lists to have equal spacing, disable the `compact_lists`_ setting (``--no-compact-lists`` option).  The precise spacing can be controlled in the stylesheet."
msgstr ""

#: ../../source/release/FAQ.rst:1043
msgid "Note again that this is not exactly WYSIWYG: it partially resembles the rules about blank lines being optional between list items in reStructuredText -- but adding/removing optional blank lines does not affect spacing in the output!  It's a feature, not a bug: you write it as you like but the output is styled consistently."
msgstr ""

#: ../../source/release/FAQ.rst:1053
msgid "Why do enumerated lists only use numbers (no letters or roman numerals)?"
msgstr ""

#: ../../source/release/FAQ.rst:1055
msgid "The rendering of enumerators (the numbers or letters acting as list markers) is completely governed by the stylesheet, so either the browser can't find the stylesheet (try enabling the `embed_stylesheet`_ setting [``--embed-stylesheet`` option]), or the browser can't understand it (try a recent Firefox, Mozilla, Konqueror, Opera, Safari, or even MSIE)."
msgstr ""

#: ../../source/release/FAQ.rst:1066
msgid "There appear to be garbage characters in the HTML.  What's up?"
msgstr ""

#: ../../source/release/FAQ.rst:1068
msgid "What you're seeing is most probably not garbage, but the result of a mismatch between the actual encoding of the HTML output and the encoding your browser is expecting.  Your browser is misinterpreting the HTML data, which is encoded text.  A discussion of text encodings is beyond the scope of this FAQ; see one or more of these documents for more info:"
msgstr ""

#: ../../source/release/FAQ.rst:1075
msgid "`UTF-8 and Unicode FAQ for Unix/Linux <http://www.cl.cam.ac.uk/~mgk25/unicode.html>`_"
msgstr ""

#: ../../source/release/FAQ.rst:1078
msgid "Chapters 3 and 4 of `Introduction to i18n [Internationalization] <http://www.debian.org/doc/manuals/intro-i18n/>`_"
msgstr ""

#: ../../source/release/FAQ.rst:1081
msgid "`Python Unicode Tutorial <http://www.reportlab.com/i18n/python_unicode_tutorial.html>`_"
msgstr ""

#: ../../source/release/FAQ.rst:1084
msgid "`Python Unicode Objects: Some Observations on Working With Non-ASCII Character Sets <http://effbot.org/zone/unicode-objects.htm>`_"
msgstr ""

#: ../../source/release/FAQ.rst:1087
msgid "The common case is with the default output encoding (UTF-8), when either numbered sections are used (via the \"sectnum_\" directive) or symbol-footnotes.  3 non-breaking spaces are inserted in each numbered section title, between the generated number and the title text.  Most footnote symbols are not available in ASCII, nor are non-breaking spaces.  When encoded with UTF-8 and viewed with ordinary ASCII tools, these characters will appear to be multi-character garbage."
msgstr ""

#: ../../source/release/FAQ.rst:1095
msgid "You may have an decoding problem in your browser (or editor, etc.). The encoding of the output is set to \"utf-8\", but your browswer isn't recognizing that.  You can either try to fix your browser (enable \"UTF-8 character set\", sometimes called \"Unicode\"), or choose a different encoding for the HTML output.  You can also try ``--output-encoding=ascii:xmlcharrefreplace`` for HTML or XML, but not applicable to non-XMLish outputs (if using runtime settings/configuration files, use ``output_encoding=ascii`` and ``output_encoding_error_handler=xmlcharrefreplace``)."
msgstr ""

#: ../../source/release/FAQ.rst:1105
msgid "If you're generating document fragments, the \"Content-Type\" metadata (between the HTML ``<head>`` and ``</head>`` tags) must agree with the encoding of the rest of the document.  For UTF-8, it should be::"
msgstr ""

#: ../../source/release/FAQ.rst:1111
msgid "Also, Docutils normally generates an XML declaration as the first line of the output.  It must also match the document encoding.  For UTF-8::"
msgstr ""

#: ../../source/release/FAQ.rst:1120
msgid "How can I retrieve the body of the HTML document?"
msgstr ""

#: ../../source/release/FAQ.rst:1122
msgid "(This is usually needed when using Docutils in conjunction with a templating system.)"
msgstr ""

#: ../../source/release/FAQ.rst:1125
msgid "You can use the `docutils.core.publish_parts()`_ function, which returns a dictionary containing an 'html_body_' entry."
msgstr ""

#: ../../source/release/FAQ.rst:1133
msgid "Why is the Docutils XHTML served as \"Content-type: text/html\"?"
msgstr ""

#: ../../source/release/FAQ.rst:1135
msgid "Full question:"
msgstr ""

#: ../../source/release/FAQ.rst:1137
msgid "Docutils' HTML output looks like XHTML and is advertised as such::"
msgstr ""

#: ../../source/release/FAQ.rst:1143
msgid "But this is followed by::"
msgstr ""

#: ../../source/release/FAQ.rst:1147
msgid "Shouldn't this be \"application/xhtml+xml\" instead of \"text/html\"?"
msgstr ""

#: ../../source/release/FAQ.rst:1149
msgid "In a perfect web, the Docutils XHTML output would be 100% strict XHTML.  But it's not a perfect web, and a major source of imperfection is Internet Explorer.  Despite it's drawbacks, IE still represents the majority of web browsers, and cannot be ignored."
msgstr ""

#: ../../source/release/FAQ.rst:1154
msgid "Short answer: if we didn't serve XHTML as \"text/html\" (which is a perfectly valid thing to do), it couldn't be viewed in Internet Explorer."
msgstr ""

#: ../../source/release/FAQ.rst:1158
msgid "Long answer: see the `\"Criticisms of Internet Explorer\" Wikipedia entry <http://en.wikipedia.org/wiki/Criticisms_of_Internet_Explorer#XHTML>`__."
msgstr ""

#: ../../source/release/FAQ.rst:1161
msgid "However, there's also `Sending XHTML as text/html Considered Harmful`__.  What to do, what to do?  We're damned no matter what we do.  So we'll continue to do the practical instead of the pure: support the browsers that are actually out there, and not fight for strict standards compliance."
msgstr ""

#: ../../source/release/FAQ.rst:1169
msgid "(Thanks to Martin F. Krafft, Robert Kern, Michael Foord, and Alan G. Isaac.)"
msgstr ""

#: ../../source/release/FAQ.rst:1174
msgid "Python Source Reader"
msgstr ""

#: ../../source/release/FAQ.rst:1177
msgid "Can I use Docutils for Python auto-documentation?"
msgstr ""

#: ../../source/release/FAQ.rst:1179
msgid "Yes, in conjunction with other projects."
msgstr ""

#: ../../source/release/FAQ.rst:1181
msgid "The Sphinx_ documentation generator includes an autodoc module."
msgstr ""

#: ../../source/release/FAQ.rst:1185
msgid "Version 2.0 of Ed Loper's `Epydoc <http://epydoc.sourceforge.net/>`_ supports reStructuredText-format docstrings for HTML output.  Docutils 0.3 or newer is required.  Development of a Docutils-specific auto-documentation tool will continue.  Epydoc works by importing Python modules to be documented, whereas the Docutils-specific tool, described above, will parse modules without importing them (as with `HappyDoc <http://happydoc.sourceforge.net/>`_, which doesn't support reStructuredText)."
msgstr ""

#: ../../source/release/FAQ.rst:1194
msgid "The advantages of parsing over importing are security and flexibility; the disadvantage is complexity/difficulty."
msgstr ""

#: ../../source/release/FAQ.rst:1197
msgid "Security: untrusted code that shouldn't be executed can be parsed; importing a module executes its top-level code."
msgstr ""

#: ../../source/release/FAQ.rst:1199
msgid "Flexibility: comments and unofficial docstrings (those not supported by Python syntax) can only be processed by parsing."
msgstr ""

#: ../../source/release/FAQ.rst:1201
msgid "Complexity/difficulty: it's a lot harder to parse and analyze a module than it is to ``import`` and analyze one."
msgstr ""

#: ../../source/release/FAQ.rst:1204
msgid "For more details, please see \"Docstring Extraction Rules\" in `PEP 258`_, item 3 (\"How\")."
msgstr ""

#: ../../source/release/FAQ.rst:1209
msgid "Miscellaneous"
msgstr ""

#: ../../source/release/FAQ.rst:1212
msgid "Is the Docutils document model based on any existing XML models?"
msgstr ""

#: ../../source/release/FAQ.rst:1214
msgid "Not directly, no.  It borrows bits from DocBook, HTML, and others.  I (David Goodger) have designed several document models over the years, and have my own biases.  The Docutils document model is designed for simplicity and extensibility, and has been influenced by the needs of the reStructuredText markup."
msgstr ""

