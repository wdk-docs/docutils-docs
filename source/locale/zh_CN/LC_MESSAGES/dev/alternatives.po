# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Nosy
# This file is distributed under the same license as the docutils-docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: docutils-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-13 09:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/dev/alternatives.rst:3
msgid "A Record of reStructuredText Syntax Alternatives"
msgstr "reStructuredText语法替代的记录"

#: ../../source/dev/alternatives.rst
msgid "Author"
msgstr "Author"

#: ../../source/dev/alternatives.rst:5
msgid "David Goodger"
msgstr "David Goodger"

#: ../../source/dev/alternatives.rst
msgid "Contact"
msgstr "Contact"

#: ../../source/dev/alternatives.rst:6
msgid "docutils-develop@lists.sourceforge.net"
msgstr "docutils-develop@lists.sourceforge.net"

#: ../../source/dev/alternatives.rst
msgid "Revision"
msgstr "Revision"

#: ../../source/dev/alternatives.rst:7
msgid "$Revision: 7383 $"
msgstr "$Revision: 7383 $"

#: ../../source/dev/alternatives.rst
msgid "Date"
msgstr "Date"

#: ../../source/dev/alternatives.rst:8
msgid "$Date: 2012-03-19 18:04:49 +0100 (Mo, 19. M盲r 2012) $"
msgstr "$Date: 2012-03-19 18:04:49 +0100 (Mo, 19. M盲r 2012) $"

#: ../../source/dev/alternatives.rst
msgid "Copyright"
msgstr "Copyright"

#: ../../source/dev/alternatives.rst:9
msgid "This document has been placed in the public domain."
msgstr "This document has been placed in the public domain."

#: ../../source/dev/alternatives.rst:11
msgid ""
"The following are ideas, alternatives, and justifications that were "
"considered for reStructuredText syntax, which did not originate with "
"Setext_ or StructuredText_.  For an analysis of constructs which *did* "
"originate with StructuredText or Setext, please see `Problems With "
"StructuredText`_.  See the `reStructuredText Markup Specification`_ for "
"full details of the established syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:18
msgid "The ideas are divided into sections:"
msgstr "The ideas are divided into sections:"

#: ../../source/dev/alternatives.rst:20
msgid ""
"Implemented_: already done.  The issues and alternatives are recorded "
"here for posterity."
msgstr ""

#: ../../source/dev/alternatives.rst:23
msgid "`Not Implemented`_: these ideas won't be implemented."
msgstr "`Not Implemented`_: these ideas won't be implemented."

#: ../../source/dev/alternatives.rst:25
msgid "Tabled_: these ideas should be revisited in the future."
msgstr "Tabled_: these ideas should be revisited in the future."

#: ../../source/dev/alternatives.rst:27
msgid ""
"`To Do`_: these ideas should be implemented.  They're just waiting for a "
"champion to resolve issues and get them done."
msgstr ""

#: ../../source/dev/alternatives.rst:30
msgid ""
"`... Or Not To Do?`_: possible but questionable.  These probably won't be"
" implemented, but you never know."
msgstr ""

#: ../../source/dev/alternatives.rst:41
msgid "目录"
msgstr "目录"

#: ../../source/dev/alternatives.rst:45
msgid "Implemented"
msgstr "Implemented"

#: ../../source/dev/alternatives.rst:48
msgid "Field Lists"
msgstr "Field Lists"

#: ../../source/dev/alternatives.rst:50
msgid ""
"Prior to the syntax for field lists being finalized, several alternatives"
" were proposed."
msgstr ""

#: ../../source/dev/alternatives.rst:53
msgid "Unadorned RFC822_ everywhere::"
msgstr "Unadorned RFC822_ everywhere::"

#: ../../source/dev/alternatives.rst:58
msgid ""
"Advantages: clean, precedent (RFC822-compliant).  Disadvantage: ambiguous"
" (these paragraphs are a prime example)."
msgstr ""

#: ../../source/dev/alternatives.rst:61 ../../source/dev/alternatives.rst:108
msgid "Conclusion: rejected."
msgstr "Conclusion: rejected."

#: ../../source/dev/alternatives.rst:63
msgid ""
"Special case: use unadorned RFC822_ for the very first or very last text "
"block of a document::"
msgstr ""

#: ../../source/dev/alternatives.rst:73
msgid ""
"Advantages: clean, precedent (RFC822-compliant).  Disadvantages: special "
"case, flat (unnested) field lists only, still ambiguous::"
msgstr ""

#: ../../source/dev/alternatives.rst:83
msgid ""
"Conclusion: rejected for the general case, accepted for specific contexts"
" (PEPs, email)."
msgstr ""

#: ../../source/dev/alternatives.rst:86
msgid "Use a directive::"
msgstr "Use a directive::"

#: ../../source/dev/alternatives.rst:93
msgid ""
"Advantages: explicit and unambiguous, RFC822-compliant. Disadvantage: "
"cumbersome."
msgstr ""

#: ../../source/dev/alternatives.rst:96
msgid ""
"Conclusion: rejected for the general case (but such a directive could "
"certainly be written)."
msgstr ""

#: ../../source/dev/alternatives.rst:99
msgid "Use Javadoc-style::"
msgstr "Use Javadoc-style::"

#: ../../source/dev/alternatives.rst:105
msgid ""
"Advantages: unambiguous, precedent, flexible.  Disadvantages: non-"
"intuitive, ugly, not RFC822-compliant."
msgstr ""

#: ../../source/dev/alternatives.rst:110
msgid "Use leading colons::"
msgstr "Use leading colons::"

#: ../../source/dev/alternatives.rst:115
msgid ""
"Advantages: unambiguous, obvious (*almost* RFC822-compliant), flexible, "
"perhaps even elegant.  Disadvantages: no precedent, not quite "
"RFC822-compliant."
msgstr ""

#: ../../source/dev/alternatives.rst:119
msgid "Conclusion: accepted!"
msgstr "Conclusion: accepted!"

#: ../../source/dev/alternatives.rst:121
msgid "Use double colons::"
msgstr "Use double colons::"

#: ../../source/dev/alternatives.rst:126
msgid ""
"Advantages: unambiguous, obvious? (*almost* RFC822-compliant), flexible, "
"similar to syntax already used for literal blocks and directives.  "
"Disadvantages: no precedent, not quite RFC822-compliant, similar to "
"syntax already used for literal blocks and directives."
msgstr ""

#: ../../source/dev/alternatives.rst:132
msgid "Conclusion: rejected because of the syntax similarity & conflicts."
msgstr "Conclusion: rejected because of the syntax similarity & conflicts."

#: ../../source/dev/alternatives.rst:134
msgid ""
"Why is RFC822 compliance important?  It's a universal Internet standard, "
"and super obvious.  Also, I'd like to support the PEP format (ulterior "
"motive: get PEPs to use reStructuredText as their standard). But it "
"*would* be easy to get used to an alternative (easy even to convert PEPs;"
" probably harder to convert python-deviants ;-)."
msgstr ""

#: ../../source/dev/alternatives.rst:140
msgid ""
"Unfortunately, without well-defined context (such as in email headers: "
"RFC822 only applies before any blank lines), the RFC822 format is "
"ambiguous.  It is very common in ordinary text.  To implement field lists"
" unambiguously, we need explicit syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:145
msgid "The following question was posed in a footnote:"
msgstr "The following question was posed in a footnote:"

#: ../../source/dev/alternatives.rst:147
msgid ""
"Should \"bibliographic field lists\" be defined at the parser level, or "
"at the DPS transformation level?  In other words, are they "
"reStructuredText-specific, or would they also be applicable to another "
"(many/every other?) syntax?"
msgstr ""

#: ../../source/dev/alternatives.rst:152
msgid ""
"The answer is that bibliographic fields are a reStructuredText-specific "
"markup convention.  Other syntaxes may implement the bibliographic "
"elements explicitly.  For example, there would be no need for such a "
"transformation for an XML-based markup syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:162
msgid "Interpreted Text \"Roles\""
msgstr "Interpreted Text \"Roles\""

#: ../../source/dev/alternatives.rst:164
msgid ""
"The original purpose of interpreted text was as a mechanism for "
"descriptive markup, to describe the nature or role of a word or phrase.  "
"For example, in XML we could say \"<function>len</function>\" to mark up "
"\"len\" as a function.  It is envisaged that within Python docstrings "
"(inline documentation in Python module source files, the primary market "
"for reStructuredText) the role of a piece of interpreted text can be "
"inferred implicitly from the context of the docstring within the program "
"source.  For other applications, however, the role may have to be "
"indicated explicitly."
msgstr ""

#: ../../source/dev/alternatives.rst:174
msgid "Interpreted text is enclosed in single backquotes (`)."
msgstr "Interpreted text is enclosed in single backquotes (`)."

#: ../../source/dev/alternatives.rst:176
msgid ""
"Initially, it was proposed that an explicit role could be indicated as a "
"word or phrase within the enclosing backquotes:"
msgstr ""

#: ../../source/dev/alternatives.rst:179
msgid "As a prefix, separated by a colon and whitespace::"
msgstr "As a prefix, separated by a colon and whitespace::"

#: ../../source/dev/alternatives.rst:183
msgid "As a suffix, separated by whitespace and a colon::"
msgstr "As a suffix, separated by whitespace and a colon::"

#: ../../source/dev/alternatives.rst:187
msgid "There are problems with the initial approach:"
msgstr "There are problems with the initial approach:"

#: ../../source/dev/alternatives.rst:189
msgid ""
"There could be ambiguity with interpreted text containing colons. For "
"example, an index entry of \"Mission: Impossible\" would require a "
"backslash-escaped colon."
msgstr ""

#: ../../source/dev/alternatives.rst:193
msgid ""
"The explicit role is descriptive markup, not content, and will not be "
"visible in the processed output.  Putting it inside the backquotes "
"doesn't feel right; the *role* isn't being quoted."
msgstr ""

#: ../../source/dev/alternatives.rst:197
msgid "Tony Ibbs suggested that the role be placed outside the backquotes::"
msgstr "Tony Ibbs suggested that the role be placed outside the backquotes::"

#: ../../source/dev/alternatives.rst:202
msgid ""
"This removes the embedded-colons ambiguity, but limits the role "
"identifier to be a single word (whitespace would be illegal). Since roles"
" are not meant to be visible after processing, the lack of whitespace "
"support is not important."
msgstr ""

#: ../../source/dev/alternatives.rst:207
msgid ""
"The suggested syntax remains ambiguous with respect to ratios and some "
"writing styles.  For example, suppose there is a \"signal\" identifier, "
"and we write::"
msgstr ""

#: ../../source/dev/alternatives.rst:213
msgid "\"noise\" looks like a role."
msgstr "\"noise\" looks like a role."

#: ../../source/dev/alternatives.rst:215
msgid "As an improvement on #2, we can bracket the role with colons::"
msgstr "As an improvement on #2, we can bracket the role with colons::"

#: ../../source/dev/alternatives.rst:219
msgid ""
"This syntax is similar to that of field lists, which is fine since both "
"are doing similar things: describing."
msgstr ""

#: ../../source/dev/alternatives.rst:222
msgid "This is the syntax chosen for reStructuredText."
msgstr "This is the syntax chosen for reStructuredText."

#: ../../source/dev/alternatives.rst:224
msgid "Another alternative is two colons instead of one::"
msgstr "Another alternative is two colons instead of one::"

#: ../../source/dev/alternatives.rst:228
msgid "But this is used for analogies (\"A:B::C:D\": \"A is to B as C is to D\")."
msgstr "But this is used for analogies (\"A:B::C:D\": \"A is to B as C is to D\")."

#: ../../source/dev/alternatives.rst:231
msgid ""
"Both alternative #2 and #4 lack delimiters on both sides of the role, "
"making it difficult to parse (by the reader)."
msgstr ""

#: ../../source/dev/alternatives.rst:234
msgid "Some kind of bracketing could be used:"
msgstr "Some kind of bracketing could be used:"

#: ../../source/dev/alternatives.rst:236
msgid "Parentheses::"
msgstr "Parentheses::"

#: ../../source/dev/alternatives.rst:240
msgid "Braces::"
msgstr "Braces::"

#: ../../source/dev/alternatives.rst:244
msgid "Square brackets::"
msgstr "Square brackets::"

#: ../../source/dev/alternatives.rst:248
msgid "Angle brackets::"
msgstr "Angle brackets::"

#: ../../source/dev/alternatives.rst:252
msgid ""
"(The overlap of \\*ML tags with angle brackets would be too confusing and"
" precludes their use.)"
msgstr ""

#: ../../source/dev/alternatives.rst:255
msgid "Syntax #3 was chosen for reStructuredText."
msgstr "Syntax #3 was chosen for reStructuredText."

#: ../../source/dev/alternatives.rst:259
msgid "Comments"
msgstr "Comments"

#: ../../source/dev/alternatives.rst:261
msgid ""
"A problem with comments (actually, with all indented constructs) is that "
"they cannot be followed by an indented block -- a block quote -- without "
"swallowing it up."
msgstr ""

#: ../../source/dev/alternatives.rst:265
msgid ""
"I thought that perhaps comments should be one-liners only.  But would "
"this mean that footnotes, hyperlink targets, and directives must then "
"also be one-liners?  Not a good solution."
msgstr ""

#: ../../source/dev/alternatives.rst:269
msgid ""
"Tony Ibbs suggested a \"comment\" directive.  I added that we could limit"
" a comment to a single text block, and that a \"multi-block comment\" "
"could use \"comment-start\" and \"comment-end\" directives.  This would "
"remove the indentation incompatibility.  A \"comment\" directive "
"automatically suggests \"footnote\" and (hyperlink) \"target\" directives"
" as well.  This could go on forever!  Bad choice."
msgstr ""

#: ../../source/dev/alternatives.rst:276
msgid ""
"Garth Kidd suggested that an \"empty comment\", a \"..\" explicit markup "
"start with nothing on the first line (except possibly whitespace) and a "
"blank line immediately following, could serve as an \"unindent\".  An "
"empty comment does **not** swallow up indented blocks following it, so "
"block quotes are safe.  \"A tiny but practical wart.\"  Accepted."
msgstr ""

#: ../../source/dev/alternatives.rst:284
msgid "Anonymous Hyperlinks"
msgstr "Anonymous Hyperlinks"

#: ../../source/dev/alternatives.rst:286
msgid "Alan Jaffray came up with this idea, along with the following syntax::"
msgstr "Alan Jaffray came up with this idea, along with the following syntax::"

#: ../../source/dev/alternatives.rst:292
msgid ""
"The idea is sound and useful.  I suggested a \"double underscore\" "
"syntax::"
msgstr ""

#: ../../source/dev/alternatives.rst:299
msgid ""
"But perhaps single underscores are okay?  The syntax looks better, but "
"the hyperlink itself doesn't explicitly say \"anonymous\"::"
msgstr ""

#: ../../source/dev/alternatives.rst:306
msgid ""
"Mixing anonymous and named hyperlinks becomes confusing.  The order of "
"targets is not significant for named hyperlinks, but it is for anonymous "
"hyperlinks::"
msgstr ""

#: ../../source/dev/alternatives.rst:316
msgid ""
"Without the extra syntax of double underscores, determining which "
"hyperlink references are anonymous may be difficult.  We'd have to check "
"which references don't have corresponding targets, and match those up "
"with anonymous targets.  Keeping to a simple consistent ordering (as with"
" auto-numbered footnotes) seems simplest."
msgstr ""

#: ../../source/dev/alternatives.rst:322
msgid ""
"reStructuredText will use the explicit double-underscore syntax for "
"anonymous hyperlinks.  An alternative (see `Reworking Explicit Markup "
"(Round 1)`_ below) for the somewhat awkward \".. __:\" syntax is \"__\"::"
msgstr ""

#: ../../source/dev/alternatives.rst:332
msgid "Reworking Explicit Markup (Round 1)"
msgstr "Reworking Explicit Markup (Round 1)"

#: ../../source/dev/alternatives.rst:334
msgid ""
"Alan Jaffray came up with the idea of `anonymous hyperlinks`_, added to "
"reStructuredText.  Subsequently it was asserted that hyperlinks "
"(especially anonymous hyperlinks) would play an increasingly important "
"role in reStructuredText documents, and therefore they require a simpler "
"and more concise syntax.  This prompted a review of the current and "
"proposed explicit markup syntaxes with regards to improving usability."
msgstr ""

#: ../../source/dev/alternatives.rst:342
msgid "Original syntax::"
msgstr "Original syntax::"

#: ../../source/dev/alternatives.rst:356
msgid "The comment text was intentionally made to look like a hyperlink target."
msgstr "The comment text was intentionally made to look like a hyperlink target."

#: ../../source/dev/alternatives.rst:359
msgid "Origins:"
msgstr "Origins:"

#: ../../source/dev/alternatives.rst:361
msgid ""
"Except for the colon (a delimiter necessary to allow for phrase-links), "
"hyperlink target ``.. _blah:`` comes from Setext."
msgstr ""

#: ../../source/dev/alternatives.rst:363
msgid "Comment syntax from Setext."
msgstr "Comment syntax from Setext."

#: ../../source/dev/alternatives.rst:364
msgid "Footnote syntax from StructuredText (\"named links\")."
msgstr "Footnote syntax from StructuredText (\"named links\")."

#: ../../source/dev/alternatives.rst:365
msgid "Directives and anonymous hyperlinks original to reStructuredText."
msgstr "Directives and anonymous hyperlinks original to reStructuredText."

#: ../../source/dev/alternatives.rst:367 ../../source/dev/alternatives.rst:393
#: ../../source/dev/alternatives.rst:424 ../../source/dev/alternatives.rst:836
#: ../../source/dev/alternatives.rst:860 ../../source/dev/alternatives.rst:888
#: ../../source/dev/alternatives.rst:920 ../../source/dev/alternatives.rst:967
msgid "Advantages:"
msgstr "Advantages:"

#: ../../source/dev/alternatives.rst:369
msgid "Consistent explicit markup indicator: \"..\"."
msgstr "Consistent explicit markup indicator: \"..\"."

#: ../../source/dev/alternatives.rst:370
msgid "Consistent hyperlink syntax: \".. _\" & \":\"."
msgstr "Consistent hyperlink syntax: \".. _\" & \":\"."

#: ../../source/dev/alternatives.rst:372 ../../source/dev/alternatives.rst:398
#: ../../source/dev/alternatives.rst:431 ../../source/dev/alternatives.rst:473
#: ../../source/dev/alternatives.rst:843 ../../source/dev/alternatives.rst:865
#: ../../source/dev/alternatives.rst:892 ../../source/dev/alternatives.rst:924
#: ../../source/dev/alternatives.rst:982
msgid "Disadvantages:"
msgstr "Disadvantages:"

#: ../../source/dev/alternatives.rst:374
msgid "Anonymous target markup is awkward: \".. __:\"."
msgstr "Anonymous target markup is awkward: \".. __:\"."

#: ../../source/dev/alternatives.rst:375
msgid "The explicit markup indicator (\"..\") is excessively overloaded?"
msgstr "The explicit markup indicator (\"..\") is excessively overloaded?"

#: ../../source/dev/alternatives.rst:376
msgid ""
"Comment text is limited (can't look like a footnote, hyperlink, or "
"directive).  But this is probably not important."
msgstr ""

#: ../../source/dev/alternatives.rst:379
msgid "Alan Jaffray's proposed syntax #1::"
msgstr "Alan Jaffray's proposed syntax #1::"

#: ../../source/dev/alternatives.rst:391
msgid "The hyperlink-connoted underscores have become first-level syntax."
msgstr "The hyperlink-connoted underscores have become first-level syntax."

#: ../../source/dev/alternatives.rst:395 ../../source/dev/alternatives.rst:471
msgid "Anonymous targets are simpler."
msgstr "Anonymous targets are simpler."

#: ../../source/dev/alternatives.rst:396
msgid "All hyperlink targets are one character shorter."
msgstr "All hyperlink targets are one character shorter."

#: ../../source/dev/alternatives.rst:400
msgid ""
"Inconsistent internal hyperlink targets.  Unlike all other named "
"hyperlink targets, there's no colon.  There's an extra leading "
"underscore, but we can't drop it because without it, \"blah\" looks like "
"a relative URI.  Unless we restore the colon::"
msgstr ""

#: ../../source/dev/alternatives.rst:407
msgid "Obtrusive markup?"
msgstr "Obtrusive markup?"

#: ../../source/dev/alternatives.rst:409
msgid "Alan Jaffray's proposed syntax #2::"
msgstr "Alan Jaffray's proposed syntax #2::"

#: ../../source/dev/alternatives.rst:421
msgid ""
"Leading underscores have been (almost) replaced by \"..\", while comments"
" and directives have gained their own syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:426
msgid "Anonymous hyperlinks are simpler."
msgstr "Anonymous hyperlinks are simpler."

#: ../../source/dev/alternatives.rst:427
msgid ""
"Unique syntax for comments.  Connotation of \"comment\" from some "
"programming languages (including our favorite)."
msgstr ""

#: ../../source/dev/alternatives.rst:429
msgid "Unique syntax for directives.  Connotation of \"action!\"."
msgstr "Unique syntax for directives.  Connotation of \"action!\"."

#: ../../source/dev/alternatives.rst:433
msgid ""
"Inconsistent internal hyperlink targets.  Again, unlike all other named "
"hyperlink targets, there's no colon.  There's a leading underscore, "
"matching the trailing underscores of references, which no other hyperlink"
" targets have.  We can't drop that one leading underscore though: without"
" it, \"blah\" looks like a relative URI.  Again, unless we restore the "
"colon::"
msgstr ""

#: ../../source/dev/alternatives.rst:442
msgid ""
"All (except for internal) hyperlink targets lack their leading "
"underscores, losing the \"hyperlink\" connotation."
msgstr ""

#: ../../source/dev/alternatives.rst:445
msgid "Obtrusive syntax for comments.  Alternatives::"
msgstr "Obtrusive syntax for comments.  Alternatives::"

#: ../../source/dev/alternatives.rst:452
msgid "Iffy syntax for directives.  Alternatives?"
msgstr "Iffy syntax for directives.  Alternatives?"

#: ../../source/dev/alternatives.rst:454
msgid "Tony Ibbs' proposed syntax::"
msgstr "Tony Ibbs' proposed syntax::"

#: ../../source/dev/alternatives.rst:466
msgid ""
"This is the same as the current syntax, except for anonymous targets "
"which drop their \"__: \"."
msgstr ""

#: ../../source/dev/alternatives.rst:469
msgid "Advantage:"
msgstr "Advantage:"

#: ../../source/dev/alternatives.rst:475
msgid ""
"Anonymous targets lack their leading underscores, losing the "
"\"hyperlink\" connotation."
msgstr ""

#: ../../source/dev/alternatives.rst:477
msgid ""
"Anonymous targets are almost indistinguishable from comments. (Better to "
"know \"up front\".)"
msgstr ""

#: ../../source/dev/alternatives.rst:480
msgid ""
"David Goodger's proposed syntax: Perhaps going back to one of Alan's "
"earlier suggestions might be the best solution.  How about simply adding "
"\"__ \" as a synonym for \".. __: \" in the original syntax?  These would"
" become equivalent::"
msgstr ""

#: ../../source/dev/alternatives.rst:493
msgid "Alternative 5 has been adopted."
msgstr "Alternative 5 has been adopted."

#: ../../source/dev/alternatives.rst:497
msgid "Backquotes in Phrase-Links"
msgstr "Backquotes in Phrase-Links"

#: ../../source/dev/alternatives.rst:499
msgid "[From a 2001-06-05 Doc-SIG post in reply to questions from Doug Hellmann.]"
msgstr "[From a 2001-06-05 Doc-SIG post in reply to questions from Doug Hellmann.]"

#: ../../source/dev/alternatives.rst:502
msgid ""
"The first draft of the spec, posted to the Doc-SIG in November 2000, used"
" square brackets for phrase-links.  I changed my mind because:"
msgstr ""

#: ../../source/dev/alternatives.rst:505
msgid ""
"In the first draft, I had already decided on single-backquotes for inline"
" literal text."
msgstr ""

#: ../../source/dev/alternatives.rst:508
msgid ""
"However, I wanted to minimize the necessity for backslash escapes, for "
"example when quoting Python repr-equivalent syntax that uses backquotes."
msgstr ""

#: ../../source/dev/alternatives.rst:512
msgid ""
"The processing of identifiers (function/method/attribute/module etc. "
"names) into hyperlinks is a useful feature.  PyDoc recognizes identifiers"
" heuristically, but it doesn't take much imagination to come up with "
"counter-examples where PyDoc's heuristics would result in embarassing "
"failure.  I wanted to do it deterministically, and that called for "
"syntax.  I called this construct \"interpreted text\"."
msgstr ""

#: ../../source/dev/alternatives.rst:520
msgid ""
"Leveraging off the ``*emphasis*/**strong**`` syntax, lead to the idea of "
"using double-backquotes as syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:523
msgid "I worked out some rules for inline markup recognition."
msgstr "I worked out some rules for inline markup recognition."

#: ../../source/dev/alternatives.rst:525
msgid ""
"In combination with #5, double backquotes lent themselves to inline "
"literals, neatly satisfying #2, minimizing backslash escapes.  In fact, "
"the spec says that no interpretation of any kind is done within double-"
"backquote inline literal text; backslashes do *no* escaping within "
"literal text."
msgstr ""

#: ../../source/dev/alternatives.rst:531
msgid "Single backquotes are then freed up for interpreted text."
msgstr "Single backquotes are then freed up for interpreted text."

#: ../../source/dev/alternatives.rst:533
msgid "I already had square brackets required for footnote references."
msgstr "I already had square brackets required for footnote references."

#: ../../source/dev/alternatives.rst:535
msgid ""
"Since interpreted text will typically turn into hyperlinks, it was a "
"natural fit to use backquotes as the phrase-quoting syntax for trailing-"
"underscore hyperlinks."
msgstr ""

#: ../../source/dev/alternatives.rst:539
msgid ""
"The original inspiration for the trailing underscore hyperlink syntax was"
" Setext.  But for phrases Setext used a very cumbersome "
"``underscores_between_words_like_this_`` syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:543
msgid ""
"The underscores can be viewed as if they were right-pointing arrows: "
"``-->``.  So ``hyperlink_`` points away from the reference, and ``.. "
"_hyperlink:`` points toward the target."
msgstr ""

#: ../../source/dev/alternatives.rst:549
msgid "Substitution Mechanism"
msgstr "Substitution Mechanism"

#: ../../source/dev/alternatives.rst:551
msgid ""
"Substitutions arose out of a Doc-SIG thread begun on 2001-10-28 by Alan "
"Jaffray, \"reStructuredText inline markup\".  It reminded me of a missing"
" piece of the reStructuredText puzzle, first referred to in my "
"contribution to \"Documentation markup & processing / PEPs\" (Doc-SIG "
"2001-06-21)."
msgstr ""

#: ../../source/dev/alternatives.rst:557
msgid ""
"Substitutions allow the power and flexibility of directives to be shared "
"by inline text.  They are a way to allow arbitrarily complex inline "
"objects, while keeping the details out of the flow of text. They are the "
"equivalent of SGML/XML's named entities.  For example, an inline image "
"(using reference syntax alternative 4d (vertical bars) and definition "
"alternative 3, the alternatives chosen for inclusion in the spec)::"
msgstr ""

#: ../../source/dev/alternatives.rst:571
msgid ""
"The ``|biohazard|`` substitution reference will be replaced in-line by "
"whatever the ``.. |biohazard|`` substitution definition generates (in "
"this case, an image).  A substitution definition contains the "
"substitution text bracketed with vertical bars, followed by a an embedded"
" inline-compatible directive, such as \"image\".  A transform is required"
" to complete the substitution."
msgstr ""

#: ../../source/dev/alternatives.rst:578
msgid "Syntax alternatives for the reference:"
msgstr "Syntax alternatives for the reference:"

#: ../../source/dev/alternatives.rst:580
msgid ""
"Use the existing interpreted text syntax, with a predefined role such as "
"\"sub\"::"
msgstr ""

#: ../../source/dev/alternatives.rst:585
msgid "Advantages: existing syntax, explicit.  Disadvantages: verbose, obtrusive."
msgstr "Advantages: existing syntax, explicit.  Disadvantages: verbose, obtrusive."

#: ../../source/dev/alternatives.rst:588
msgid ""
"Use a variant of the interpreted text syntax, with a new suffix akin to "
"the underscore in phrase-link references::"
msgstr ""

#: ../../source/dev/alternatives.rst:600
msgid ""
"Due to incompatibility with other constructs and ordinary text usage, (f)"
" and (g) are not possible."
msgstr ""

#: ../../source/dev/alternatives.rst:603
msgid "Use interpreted text syntax with a fixed internal format::"
msgstr "Use interpreted text syntax with a fixed internal format::"

#: ../../source/dev/alternatives.rst:619
msgid ""
"To avoid ML confusion (k) and (l) are definitely out.  Square brackets "
"(j) won't work in the target (the substitution definition would be "
"indistinguishable from a footnote)."
msgstr ""

#: ../../source/dev/alternatives.rst:623
msgid ""
"The ```/name/``` syntax (g) is reminiscent of \"s/find/sub\" substitution"
" syntax in ed-like languages.  However, it may have a misleading "
"association with regexps, and looks like an absolute POSIX path.  (i) is "
"visually equivalent and lacking the connotations."
msgstr ""

#: ../../source/dev/alternatives.rst:629
msgid ""
"A disadvantage of all of these is that they limit interpreted text, "
"albeit only slightly."
msgstr ""

#: ../../source/dev/alternatives.rst:632
msgid "Use specialized syntax, something new::"
msgstr "Use specialized syntax, something new::"

#: ../../source/dev/alternatives.rst:649
msgid ""
"\"#\" (a) and \"@\" (b) are obtrusive.  \"/\" (c) without backquotes "
"looks just like a POSIX path; it is likely for such usage to appear in "
"text."
msgstr ""

#: ../../source/dev/alternatives.rst:653
msgid "\"|\" (d) and \"^\" (h) are feasible."
msgstr "\"|\" (d) and \"^\" (h) are feasible."

#: ../../source/dev/alternatives.rst:655
msgid ""
"Redefine the trailing underscore syntax.  See definition syntax "
"alternative 4, below."
msgstr ""

#: ../../source/dev/alternatives.rst:658
msgid "Syntax alternatives for the definition:"
msgstr "Syntax alternatives for the definition:"

#: ../../source/dev/alternatives.rst:660
msgid ""
"Use the existing directive syntax, with a predefined directive such as "
"\"sub\".  It contains a further embedded directive resolving to an "
"inline-compatible object::"
msgstr ""

#: ../../source/dev/alternatives.rst:672
msgid "The advantages and disadvantages are the same as in inline alternative 1."
msgstr "The advantages and disadvantages are the same as in inline alternative 1."

#: ../../source/dev/alternatives.rst:675
msgid "Use syntax as in #1, but with an embedded directivecompressed::"
msgstr "Use syntax as in #1, but with an embedded directivecompressed::"

#: ../../source/dev/alternatives.rst:680
msgid "This is a bit better than alternative 1, but still too much."
msgstr "This is a bit better than alternative 1, but still too much."

#: ../../source/dev/alternatives.rst:682
msgid ""
"Use a variant of directive syntax, incorporating the substitution text, "
"obviating the need for a special \"sub\" directive name.  If we assume "
"reference alternative 4d (vertical bars), the matching definition would "
"look like this::"
msgstr ""

#: ../../source/dev/alternatives.rst:690
msgid "(Suggested by Alan Jaffray on Doc-SIG from 2001-11-06.)"
msgstr "(Suggested by Alan Jaffray on Doc-SIG from 2001-11-06.)"

#: ../../source/dev/alternatives.rst:692
msgid ""
"Instead of adding new syntax, redefine the trailing underscore syntax to "
"mean \"substitution reference\" instead of \"hyperlink reference\".  "
"Alan's example::"
msgstr ""

#: ../../source/dev/alternatives.rst:701
msgid ""
"A problem with the proposed syntax is that URIs which look like simple "
"reference names (alphanum plus \".\", \"-\", \"_\") would be "
"indistinguishable from substitution directive names.  A more consistent "
"syntax would be::"
msgstr ""

#: ../../source/dev/alternatives.rst:711
msgid "(``::`` after ``.. _Jonathan: lj``.)"
msgstr "(``::`` after ``.. _Jonathan: lj``.)"

#: ../../source/dev/alternatives.rst:713
msgid ""
"The \"Zope\" target is a simple external hyperlink, but the \"Jonathan\" "
"target contains a directive.  Alan proposed is that the reference text be"
" replaced by whatever the referenced directive (the \"directive target\")"
" produces.  A directive reference becomes a hyperlink reference if the "
"contents of the directive target resolve to a hyperlink.  If the "
"directive target resolves to an icon, the reference is replaced by an "
"inline icon.  If the directive target resolves to a hyperlink, the "
"directive reference becomes a hyperlink reference."
msgstr ""

#: ../../source/dev/alternatives.rst:723
msgid "This seems too indirect and complicated for easy comprehension."
msgstr "This seems too indirect and complicated for easy comprehension."

#: ../../source/dev/alternatives.rst:725
msgid ""
"The reference in the text will sometimes become a link, sometimes not.  "
"Sometimes the reference text will remain, sometimes not.  We don't know "
"*at the reference*::"
msgstr ""

#: ../../source/dev/alternatives.rst:732
msgid "That's a problem."
msgstr "That's a problem."

#: ../../source/dev/alternatives.rst:734
msgid ""
"The syntax that has been incorporated into the spec and parser is "
"reference alternative 4d with definition alternative 3::"
msgstr ""

#: ../../source/dev/alternatives.rst:742
msgid ""
"We can also combine substitution references with hyperlink references, by"
" appending a \"_\" (named hyperlink reference) or \"__\" (anonymous "
"hyperlink reference) suffix to the substitution reference.  This allows "
"us to click on an image-link::"
msgstr ""

#: ../../source/dev/alternatives.rst:753
msgid ""
"There have been several suggestions for the naming of these constructs, "
"originally called \"substitution references\" and \"substitutions\"."
msgstr ""

#: ../../source/dev/alternatives.rst:757
msgid "Candidate names for the reference construct:"
msgstr "Candidate names for the reference construct:"

#: ../../source/dev/alternatives.rst:759
msgid "substitution reference"
msgstr "substitution reference"

#: ../../source/dev/alternatives.rst:760
msgid "tagging reference"
msgstr "tagging reference"

#: ../../source/dev/alternatives.rst:761
msgid "inline directive reference"
msgstr "inline directive reference"

#: ../../source/dev/alternatives.rst:762
msgid "directive reference"
msgstr "directive reference"

#: ../../source/dev/alternatives.rst:763
msgid "indirect inline directive reference"
msgstr "indirect inline directive reference"

#: ../../source/dev/alternatives.rst:764
msgid "inline directive placeholder"
msgstr "inline directive placeholder"

#: ../../source/dev/alternatives.rst:765
msgid "inline directive insertion reference"
msgstr "inline directive insertion reference"

#: ../../source/dev/alternatives.rst:766
msgid "directive insertion reference"
msgstr "directive insertion reference"

#: ../../source/dev/alternatives.rst:767
msgid "insertion reference"
msgstr "insertion reference"

#: ../../source/dev/alternatives.rst:768
msgid "directive macro reference"
msgstr "directive macro reference"

#: ../../source/dev/alternatives.rst:769
msgid "macro reference"
msgstr "macro reference"

#: ../../source/dev/alternatives.rst:770
msgid "substitution directive reference"
msgstr "substitution directive reference"

#: ../../source/dev/alternatives.rst:772
msgid "Candidate names for the definition construct:"
msgstr "Candidate names for the definition construct:"

#: ../../source/dev/alternatives.rst:774
msgid "substitution"
msgstr "substitution"

#: ../../source/dev/alternatives.rst:775
msgid "substitution directive"
msgstr "substitution directive"

#: ../../source/dev/alternatives.rst:776
msgid "tag"
msgstr "tag"

#: ../../source/dev/alternatives.rst:777
msgid "tagged directive"
msgstr "tagged directive"

#: ../../source/dev/alternatives.rst:778
msgid "directive target"
msgstr "directive target"

#: ../../source/dev/alternatives.rst:779
msgid "inline directive"
msgstr "inline directive"

#: ../../source/dev/alternatives.rst:780
msgid "inline directive definition"
msgstr "inline directive definition"

#: ../../source/dev/alternatives.rst:781
msgid "referenced directive"
msgstr "referenced directive"

#: ../../source/dev/alternatives.rst:782
msgid "indirect directive"
msgstr "indirect directive"

#: ../../source/dev/alternatives.rst:783
msgid "indirect directive definition"
msgstr "indirect directive definition"

#: ../../source/dev/alternatives.rst:784
msgid "directive definition"
msgstr "directive definition"

#: ../../source/dev/alternatives.rst:785
msgid "indirect inline directive"
msgstr "indirect inline directive"

#: ../../source/dev/alternatives.rst:786
msgid "named directive definition"
msgstr "named directive definition"

#: ../../source/dev/alternatives.rst:787
msgid "inline directive insertion definition"
msgstr "inline directive insertion definition"

#: ../../source/dev/alternatives.rst:788
msgid "directive insertion definition"
msgstr "directive insertion definition"

#: ../../source/dev/alternatives.rst:789
msgid "insertion definition"
msgstr "insertion definition"

#: ../../source/dev/alternatives.rst:790
msgid "insertion directive"
msgstr "insertion directive"

#: ../../source/dev/alternatives.rst:791 ../../source/dev/alternatives.rst:795
msgid "substitution definition"
msgstr "substitution definition"

#: ../../source/dev/alternatives.rst:792
msgid "directive macro definition"
msgstr "directive macro definition"

#: ../../source/dev/alternatives.rst:793
msgid "macro definition"
msgstr "macro definition"

#: ../../source/dev/alternatives.rst:794
msgid "substitution directive definition"
msgstr "substitution directive definition"

#: ../../source/dev/alternatives.rst:797
msgid ""
"\"Inline directive reference\" (1c) seems to be an appropriate term at "
"first, but the term \"inline\" is redundant in the case of the reference."
"  Its counterpart \"inline directive definition\" (2g) is awkward, "
"because the directive definition itself is not inline."
msgstr ""

#: ../../source/dev/alternatives.rst:802
msgid ""
"\"Directive reference\" (1d) and \"directive definition\" (2k) are too "
"vague.  \"Directive definition\" could be used to refer to any directive,"
" not just those used for inline substitutions."
msgstr ""

#: ../../source/dev/alternatives.rst:806
msgid ""
"One meaning of the term \"macro\" (1k, 2s, 2t) is too programming-"
"language-specific.  Also, macros are typically simple text substitution "
"mechanisms: the text is substituted first and evaluated later.  "
"reStructuredText substitution definitions are evaluated in place at parse"
" time and substituted afterwards."
msgstr ""

#: ../../source/dev/alternatives.rst:812
msgid ""
"\"Insertion\" (1h, 1i, 2n-2q) is almost right, but it implies that "
"something new is getting added rather than one construct being replaced "
"by another."
msgstr ""

#: ../../source/dev/alternatives.rst:816
msgid ""
"Which brings us back to \"substitution\".  The overall best names are "
"\"substitution reference\" (1a) and \"substitution definition\" (2v).  A "
"long way to go to add one word!"
msgstr ""

#: ../../source/dev/alternatives.rst:822
msgid "Inline External Targets"
msgstr "Inline External Targets"

#: ../../source/dev/alternatives.rst:824
msgid "Currently reStructuredText has two hyperlink syntax variations:"
msgstr "Currently reStructuredText has two hyperlink syntax variations:"

#: ../../source/dev/alternatives.rst:826
msgid "Named hyperlinks::"
msgstr "Named hyperlinks::"

#: ../../source/dev/alternatives.rst:838 ../../source/dev/alternatives.rst:862
msgid "The plaintext is readable."
msgstr "The plaintext is readable."

#: ../../source/dev/alternatives.rst:839
msgid ""
"Each target may be reused multiple times (e.g., just write "
"``\"reference_\"`` again)."
msgstr ""

#: ../../source/dev/alternatives.rst:841
msgid "No syncronized ordering of references and targets is necessary."
msgstr "No syncronized ordering of references and targets is necessary."

#: ../../source/dev/alternatives.rst:845
msgid ""
"The reference text must be repeated as target names; could lead to "
"mistakes."
msgstr ""

#: ../../source/dev/alternatives.rst:847
msgid ""
"The target URLs may be located far from the references, and hard to find "
"in the plaintext."
msgstr ""

#: ../../source/dev/alternatives.rst:850
msgid "Anonymous hyperlinks (in current reStructuredText)::"
msgstr "Anonymous hyperlinks (in current reStructuredText)::"

#: ../../source/dev/alternatives.rst:863 ../../source/dev/alternatives.rst:973
msgid "The reference text does not have to be repeated."
msgstr "The reference text does not have to be repeated."

#: ../../source/dev/alternatives.rst:867
msgid "References and targets must be kept in sync."
msgstr "References and targets must be kept in sync."

#: ../../source/dev/alternatives.rst:868 ../../source/dev/alternatives.rst:895
msgid "Targets cannot be reused."
msgstr "Targets cannot be reused."

#: ../../source/dev/alternatives.rst:869
msgid "The target URLs may be located far from the references."
msgstr "The target URLs may be located far from the references."

#: ../../source/dev/alternatives.rst:871
msgid ""
"For comparison and historical background, StructuredText also has two "
"syntaxes for hyperlinks:"
msgstr ""

#: ../../source/dev/alternatives.rst:874
msgid "First, ``\"reference text\":URL``::"
msgstr "First, ``\"reference text\":URL``::"

#: ../../source/dev/alternatives.rst:880
msgid "Second, ``\"reference text\", http://example.com/absolute_URL``::"
msgstr "Second, ``\"reference text\", http://example.com/absolute_URL``::"

#: ../../source/dev/alternatives.rst:886
msgid "Both syntaxes share advantages and disadvantages:"
msgstr "Both syntaxes share advantages and disadvantages:"

#: ../../source/dev/alternatives.rst:890 ../../source/dev/alternatives.rst:922
msgid "The target is specified immediately adjacent to the reference."
msgstr "The target is specified immediately adjacent to the reference."

#: ../../source/dev/alternatives.rst:894 ../../source/dev/alternatives.rst:926
#: ../../source/dev/alternatives.rst:984
msgid "Poor plaintext readability."
msgstr "Poor plaintext readability."

#: ../../source/dev/alternatives.rst:896
msgid "Both syntaxes use double quotes, common in ordinary text."
msgstr "Both syntaxes use double quotes, common in ordinary text."

#: ../../source/dev/alternatives.rst:897
msgid ""
"In the first syntax, the URL and the last word are stuck together, "
"exacerbating the line wrap problem."
msgstr ""

#: ../../source/dev/alternatives.rst:899
msgid ""
"The second syntax is too magical; text could easily be written that way "
"by accident (although only absolute URLs are recognized here, perhaps "
"because of the potential for ambiguity)."
msgstr ""

#: ../../source/dev/alternatives.rst:903
msgid "A new type of \"inline external hyperlink\" has been proposed."
msgstr "A new type of \"inline external hyperlink\" has been proposed."

#: ../../source/dev/alternatives.rst:905
msgid ""
"On 2002-06-28, Simon Budig proposed__ a new syntax for reStructuredText "
"hyperlinks::"
msgstr ""

#: ../../source/dev/alternatives.rst:917
msgid ""
"The syntax, advantages, and disadvantages are similar to those of "
"StructuredText."
msgstr ""

#: ../../source/dev/alternatives.rst:927
msgid "Targets cannot be reused (unless named, but the semantics are unclear)."
msgstr "Targets cannot be reused (unless named, but the semantics are unclear)."

#: ../../source/dev/alternatives.rst:930
msgid "Problems:"
msgstr "Problems:"

#: ../../source/dev/alternatives.rst:932
msgid ""
"The ``\"`ref`_(URL)\"`` syntax forces the last word of the reference text"
" to be joined to the URL, making a potentially very long word that can't "
"be wrapped (URLs can be very long). The reference and the URL should be "
"separate.  This is a symptom of the following point:"
msgstr ""

#: ../../source/dev/alternatives.rst:938
msgid ""
"The syntax produces a single compound construct made up of two equally "
"important parts, *with syntax in the middle*, *between* the reference and"
" the target.  This is unprecedented in reStructuredText."
msgstr ""

#: ../../source/dev/alternatives.rst:943
msgid ""
"The \"inline hyperlink\" text is *not* a named reference (there's no "
"lookup by name), so it shouldn't look like one."
msgstr ""

#: ../../source/dev/alternatives.rst:946
msgid ""
"According to the IETF standards RFC 2396 and RFC 2732, parentheses are "
"legal URI characters and curly braces are legal email characters, making "
"their use prohibitively difficult."
msgstr ""

#: ../../source/dev/alternatives.rst:950
msgid "The named/anonymous semantics are unclear."
msgstr "The named/anonymous semantics are unclear."

#: ../../source/dev/alternatives.rst:952
msgid ""
"After an analysis__ of the syntax of (1) above, we came up with the "
"following compromise syntax::"
msgstr ""

#: ../../source/dev/alternatives.rst:964
msgid ""
"The syntax builds on that of the existing \"inline internal targets\": "
"``an _`inline internal target`.``"
msgstr ""

#: ../../source/dev/alternatives.rst:969
msgid ""
"The target is specified immediately adjacent to the reference, improving "
"maintainability:"
msgstr ""

#: ../../source/dev/alternatives.rst:972
msgid "References and targets are easily kept in sync."
msgstr "References and targets are easily kept in sync."

#: ../../source/dev/alternatives.rst:975
msgid ""
"The construct is executed in two parts: references identical to existing "
"references, and targets that are new but not too big a stretch from "
"current syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:979
msgid "There's overwhelming precedent for quoting URLs with angle brackets [#]_."
msgstr "There's overwhelming precedent for quoting URLs with angle brackets [#]_."

#: ../../source/dev/alternatives.rst:985
msgid "Lots of \"line noise\"."
msgstr "Lots of \"line noise\"."

#: ../../source/dev/alternatives.rst:986
msgid "Targets cannot be reused (unless named; see below)."
msgstr "Targets cannot be reused (unless named; see below)."

#: ../../source/dev/alternatives.rst:988
msgid ""
"To alleviate the readability issue slightly, we could allow the target to"
" appear later, such as after the end of the sentence::"
msgstr ""

#: ../../source/dev/alternatives.rst:995
msgid ""
"Problem: this could only work for one reference at a time "
"(reference/target pairs must be proximate [refA trgA refB trgB], not "
"interleaved [refA refB trgA trgB] or nested [refA refB trgB trgA]).  This"
" variation is too problematic; references and inline external targets "
"will have to be kept imediately adjacent (see (3) below)."
msgstr ""

#: ../../source/dev/alternatives.rst:1002
msgid ""
"The ``\"reference__ __<target>\"`` syntax is actually for \"anonymous "
"inline external targets\", emphasized by the double underscores.  It "
"follows that single trailing and leading underscores would lead to "
"*implicitly named* inline external targets.  This would allow the reuse "
"of targets by name.  So after ``\"reference_ _<target>\"``, another "
"``\"reference_\"`` would point to the same target."
msgstr ""

#: ../../source/dev/alternatives.rst:1010
msgid "From RFC 2396 (URI syntax):"
msgstr "From RFC 2396 (URI syntax):"

#: ../../source/dev/alternatives.rst:1012
msgid ""
"The angle-bracket \"<\" and \">\" and double-quote (\") characters are "
"excluded [from URIs] because they are often used as the delimiters around"
" URI in text documents and protocol fields."
msgstr ""

#: ../../source/dev/alternatives.rst:1017
msgid ""
"Using <> angle brackets around each URI is especially recommended as a "
"delimiting style for URI that contain whitespace."
msgstr ""

#: ../../source/dev/alternatives.rst:1021
msgid "From RFC 822 (email headers):"
msgstr "From RFC 822 (email headers):"

#: ../../source/dev/alternatives.rst:1023
msgid ""
"Angle brackets (\"<\" and \">\") are generally used to indicate the "
"presence of a one machine-usable reference (e.g., delimiting mailboxes), "
"possibly including source-routing to the machine."
msgstr ""

#: ../../source/dev/alternatives.rst:1028
msgid ""
"If it is best for references and inline external targets to be "
"immediately adjacent, then they might as well be integrated. Here's an "
"alternative syntax embedding the target URL in the reference::"
msgstr ""

#: ../../source/dev/alternatives.rst:1037
msgid ""
"Advantages and disadvantages are similar to those in (2). Readability is "
"still an issue, but the syntax is a bit less heavyweight (reduced line "
"noise).  Backquotes are required, even for one-word references; the "
"target URL is included within the reference text, forcing a phrase "
"context."
msgstr ""

#: ../../source/dev/alternatives.rst:1043
msgid "We'll call this variant \"embedded URIs\"."
msgstr "We'll call this variant \"embedded URIs\"."

#: ../../source/dev/alternatives.rst:1045
msgid ""
"Problem: how to refer to a title like \"HTML Anchors: <a>\" (which ends "
"with an HTML/SGML/XML tag)?  We could either require more syntax on the "
"target (like ``\"`reference text __<http://example.com/>`__\"``), or "
"require the odd conflicting title to be escaped (like ``\"`HTML Anchors: "
"\\<a>`__\"``).  The latter seems preferable, and not too onerous."
msgstr ""

#: ../../source/dev/alternatives.rst:1052
msgid ""
"Similarly to (2) above, a single trailing underscore would convert the "
"reference & inline external target from anonymous to implicitly named, "
"allowing reuse of targets by name."
msgstr ""

#: ../../source/dev/alternatives.rst:1056
msgid "I think this is the least objectionable of the syntax alternatives."
msgstr "I think this is the least objectionable of the syntax alternatives."

#: ../../source/dev/alternatives.rst:1058
msgid ""
"Other syntax variations have been proposed (by Brett Cannon and Benja "
"Fallenstein)::"
msgstr ""

#: ../../source/dev/alternatives.rst:1073
msgid ""
"None of these variations are clearly superior to #3 above.  Some have "
"problems that exclude their use."
msgstr ""

#: ../../source/dev/alternatives.rst:1076
msgid ""
"With any kind of inline external target syntax it comes down to the "
"conflict between maintainability and plaintext readability.  I don't see "
"a major problem with reStructuredText's maintainability, and I don't want"
" to sacrifice plaintext readability to \"improve\" it."
msgstr ""

#: ../../source/dev/alternatives.rst:1081
msgid ""
"The proponents of inline external targets want them for easily "
"maintainable web pages.  The arguments go something like this:"
msgstr ""

#: ../../source/dev/alternatives.rst:1084
msgid ""
"Named hyperlinks are difficult to maintain because the reference text is "
"duplicated as the target name."
msgstr ""

#: ../../source/dev/alternatives.rst:1087
msgid "To which I said, \"So use anonymous hyperlinks.\""
msgstr "To which I said, \"So use anonymous hyperlinks.\""

#: ../../source/dev/alternatives.rst:1089
msgid ""
"Anonymous hyperlinks are difficult to maintain becuase the references and"
" targets have to be kept in sync."
msgstr ""

#: ../../source/dev/alternatives.rst:1092
msgid ""
"\"So keep the targets close to the references, grouped after each "
"paragraph.  Maintenance is trivial.\""
msgstr ""

#: ../../source/dev/alternatives.rst:1095
msgid "But targets grouped after paragraphs break the flow of text."
msgstr "But targets grouped after paragraphs break the flow of text."

#: ../../source/dev/alternatives.rst:1097
msgid ""
"\"Surely less than URLs embedded in the text!  And if the intent is to "
"produce web pages, not readable plaintext, then who cares about the flow "
"of text?\""
msgstr ""

#: ../../source/dev/alternatives.rst:1101
msgid "Many participants have voiced their objections to the proposed syntax:"
msgstr "Many participants have voiced their objections to the proposed syntax:"

#: ../../source/dev/alternatives.rst:1103
msgid ""
"Garth Kidd: \"I strongly prefer the current way of doing it. Inline is "
"spectactularly messy, IMHO.\""
msgstr ""

#: ../../source/dev/alternatives.rst:1106
msgid ""
"Tony Ibbs: \"I vehemently agree... that the inline alternatives being "
"suggested look messy - there are/were good reasons they've been taken "
"out...  I don't believe I would gain from the new syntaxes.\""
msgstr ""

#: ../../source/dev/alternatives.rst:1111
msgid ""
"Paul Moore: \"I agree as well.  The proposed syntax is far too "
"punctuation-heavy, and any of the alternatives discussed are ambiguous or"
" too subtle.\""
msgstr ""

#: ../../source/dev/alternatives.rst:1115
msgid "Others have voiced their support:"
msgstr "Others have voiced their support:"

#: ../../source/dev/alternatives.rst:1117
msgid ""
"fantasai: \"I agree with Simon.  In many cases, though certainly not in "
"all, I find parenthesizing the url in plain text flows better than "
"relegating it to a footnote.\""
msgstr ""

#: ../../source/dev/alternatives.rst:1121
msgid ""
"Ken Manheimer: \"I'd like to weigh in requesting some kind of easy, "
"direct inline reference link.\""
msgstr ""

#: ../../source/dev/alternatives.rst:1124
msgid ""
"(Interesting that those *against* the proposal have been using "
"reStructuredText for a while, and those *for* the proposal are either new"
" to the list [\"fantasai\", background unknown] or longtime "
"StructuredText users [Ken Manheimer].)"
msgstr ""

#: ../../source/dev/alternatives.rst:1129
msgid ""
"I was initially ambivalent/against the proposed \"inline external "
"targets\".  I value reStructuredText's readability very highly, and "
"although the proposed syntax offers convenience, I don't know if the "
"convenience is worth the cost in ugliness.  Does the proposed syntax "
"compromise readability too much, or should the choice be left up to the "
"author?  Perhaps if the syntax is *allowed* but its use strongly "
"*discouraged*, for aesthetic/readability reasons?"
msgstr ""

#: ../../source/dev/alternatives.rst:1137
msgid ""
"After a great deal of thought and much input from users, I've decided "
"that there are reasonable use cases for this construct.  The "
"documentation should strongly caution against its use in most situations,"
" recommending independent block-level targets instead. Syntax #3 above "
"(\"embedded URIs\") will be used."
msgstr ""

#: ../../source/dev/alternatives.rst:1145
msgid "Doctree Representation of Transitions"
msgstr "Doctree Representation of Transitions"

#: ../../source/dev/alternatives.rst:1147
msgid ""
"(Although not reStructuredText-specific, this section fits best in this "
"document.)"
msgstr ""

#: ../../source/dev/alternatives.rst:1150
msgid ""
"Having added the \"horizontal rule\" construct to the `reStructuredText "
"Markup Specification`_, a decision had to be made as to how to reflect "
"the construct in the implementation of the document tree.  Given this "
"source::"
msgstr ""

#: ../../source/dev/alternatives.rst:1164
msgid ""
"The horizontal rule indicates a \"transition\" (in prose terms) or the "
"start of a new \"division\".  Before implementation, the parsed document "
"tree would be::"
msgstr ""

#: ../../source/dev/alternatives.rst:1178
msgid "There are several possibilities for the implementation:"
msgstr "There are several possibilities for the implementation:"

#: ../../source/dev/alternatives.rst:1180
msgid ""
"Implement horizontal rules as \"divisions\" or segments.  A \"division\" "
"is a title-less, non-hierarchical section.  The first try at an "
"implementation looked like this::"
msgstr ""

#: ../../source/dev/alternatives.rst:1194
msgid ""
"But the two paragraphs are really at the same level; they shouldn't "
"appear to be at different levels.  There's really an invisible \"first "
"division\".  The horizontal rule splits the document body into two "
"segments, which should be treated uniformly."
msgstr ""

#: ../../source/dev/alternatives.rst:1199
msgid "Treating \"divisions\" uniformly brings us to the second possibility::"
msgstr "Treating \"divisions\" uniformly brings us to the second possibility::"

#: ../../source/dev/alternatives.rst:1213
msgid ""
"With this change, documents and sections will directly contain divisions "
"and sections, but not body elements.  Only divisions will directly "
"contain body elements.  Even without a horizontal rule anywhere, the body"
" elements of a document or section would be contained within a division "
"element.  This makes the document tree deeper.  This is similar to the "
"way HTML_ treats document contents: grouped within a ``<body>`` element."
msgstr ""

#: ../../source/dev/alternatives.rst:1221
msgid "Implement them as \"transitions\", empty elements::"
msgstr "Implement them as \"transitions\", empty elements::"

#: ../../source/dev/alternatives.rst:1233
msgid ""
"A transition would be a \"point element\", not containing anything, only "
"identifying a point within the document structure.  This keeps the "
"document tree flatter, but the idea of a \"point element\" like "
"\"transition\" smells bad.  A transition isn't a thing itself, it's the "
"space between two divisions.  However, transitions are a practical "
"solution."
msgstr ""

#: ../../source/dev/alternatives.rst:1240
msgid "Solution 3 was chosen for incorporation into the document tree model."
msgstr "Solution 3 was chosen for incorporation into the document tree model."

#: ../../source/dev/alternatives.rst:1246
msgid "Syntax for Line Blocks"
msgstr "Syntax for Line Blocks"

#: ../../source/dev/alternatives.rst:1248
msgid ""
"An early idea: How about a literal-block-like prefix, perhaps \"``;;``\"?"
"  (It is, after all, a *semi-literal* literal block, no?) Example::"
msgstr ""

#: ../../source/dev/alternatives.rst:1268
msgid "Kinda lame."
msgstr "Kinda lame."

#: ../../source/dev/alternatives.rst:1270
msgid ""
"Another idea: in an ordinary paragraph, if the first line ends with a "
"backslash (escaping the newline), interpret the entire paragraph as a "
"verse block?  For example::"
msgstr ""

#: ../../source/dev/alternatives.rst:1278
msgid ""
"(Awful, and arguably invalid, since in Japanese the word \"haiku\" "
"contains three syllables not two.)"
msgstr ""

#: ../../source/dev/alternatives.rst:1281
msgid ""
"This idea was superceded by the rules for escaped whitespace, useful for "
"`character-level inline markup`_."
msgstr ""

#: ../../source/dev/alternatives.rst:1284
msgid ""
"In a `2004-02-22 docutils-develop message`__, Jarno Elonen proposed a "
"\"plain list\" syntax (and also provided a patch)::"
msgstr ""

#: ../../source/dev/alternatives.rst:1293
msgid ""
"This syntax is very natural.  However, these \"plain lists\" seem very "
"similar to line blocks, and I see so little intrinsic \"list-ness\" that "
"I'm loathe to add a new object.  I used the term \"blurbs\" to remove the"
" \"list\" connotation from the originally proposed name. Perhaps line "
"blocks could be refined to add the two properties they currently lack:"
msgstr ""

#: ../../source/dev/alternatives.rst:1300
msgid "long lines wrap nicely"
msgstr "long lines wrap nicely"

#: ../../source/dev/alternatives.rst:1301
msgid "HTML output doesn't look like program code in non-CSS web browsers"
msgstr "HTML output doesn't look like program code in non-CSS web browsers"

#: ../../source/dev/alternatives.rst:1304
msgid ""
"(A) is an issue of all 3 aspects of Docutils: syntax (construct "
"behaviour), internal representation, and output.  (B) is partly an issue "
"of internal representation but mostly of output."
msgstr ""

#: ../../source/dev/alternatives.rst:1308
msgid ""
"ReStructuredText will redefine line blocks with the \"|\"-quoting syntax."
"  The following is my current thinking."
msgstr ""

#: ../../source/dev/alternatives.rst:1313
msgid "Syntax"
msgstr "Syntax"

#: ../../source/dev/alternatives.rst:1315
msgid "Perhaps line block syntax like this would do::"
msgstr "Perhaps line block syntax like this would do::"

#: ../../source/dev/alternatives.rst:1325
msgid ""
"Note that the \"nested\" list does not have nested syntax (the \"|\" are "
"not further indented); the leading whitespace would still be significant "
"somehow (more below).  As for long lines in the input, this could "
"suffice::"
msgstr ""

#: ../../source/dev/alternatives.rst:1336
msgid ""
"The lack of \"|\" on the third line indicates that it's a continuation of"
" the second line, wrapped."
msgstr ""

#: ../../source/dev/alternatives.rst:1339
msgid ""
"I don't see much point in allowing arbitrary nested content.  Multiple "
"paragraphs or bullet lists inside a \"blurb\" doesn't make sense to me. "
"Simple nested line blocks should suffice."
msgstr ""

#: ../../source/dev/alternatives.rst:1345
msgid "Internal Representation"
msgstr "Internal Representation"

#: ../../source/dev/alternatives.rst:1347
msgid "Line blocks are currently represented as text blobs as follows::"
msgstr "Line blocks are currently represented as text blobs as follows::"

#: ../../source/dev/alternatives.rst:1354
msgid "Instead, we could represent each line by a separate element::"
msgstr "Instead, we could represent each line by a separate element::"

#: ../../source/dev/alternatives.rst:1362
msgid ""
"We'd keep the significance of the leading whitespace of each line either "
"by converting it to non-breaking spaces at output, or with a per-line "
"margin.  Non-breaking spaces are simpler (for HTML, anyway) but kludgey, "
"and wouldn't support indented long lines that wrap.  But should inter-"
"word whitespace (i.e., not leading whitespace) be preserved?  Currently "
"it is preserved in line blocks."
msgstr ""

#: ../../source/dev/alternatives.rst:1369
msgid "Representing a more complex line block may be tricky::"
msgstr "Representing a more complex line block may be tricky::"

#: ../../source/dev/alternatives.rst:1376
msgid "Perhaps the representation could allow for nested line blocks::"
msgstr "Perhaps the representation could allow for nested line blocks::"

#: ../../source/dev/alternatives.rst:1380
msgid ""
"With this model, leading whitespace would no longer be significant. "
"Instead, left margins are implied by the nesting.  The example above "
"could be represented as follows::"
msgstr ""

#: ../../source/dev/alternatives.rst:1397
msgid "I wasn't sure what to do about even more complex line blocks::"
msgstr "I wasn't sure what to do about even more complex line blocks::"

#: ../../source/dev/alternatives.rst:1405
msgid ""
"How should that be parsed and nested?  Should the first line have the "
"same nesting level (== indentation in the output) as the fourth line, or "
"the same as the last line?  Mark Nodine suggested that such line blocks "
"be parsed similarly to complexly-nested block quotes, which seems "
"reasonable.  In the example above, this would result in the nesting of "
"first line matching the last line's nesting.  In other words, the nesting"
" would be relative to neighboring lines only."
msgstr ""

#: ../../source/dev/alternatives.rst:1416
msgid "Output"
msgstr "Output"

#: ../../source/dev/alternatives.rst:1418
msgid ""
"In HTML, line blocks are currently output as \"<pre>\" blocks, which "
"gives us significant whitespace and line breaks, but doesn't allow long "
"lines to wrap and causes monospaced output without stylesheets. Instead, "
"we could output \"<div>\" elements parallelling the representation above,"
" where each nested <div class=\"line_block\"> would have an increased "
"left margin (specified in the stylesheet)."
msgstr ""

#: ../../source/dev/alternatives.rst:1425
msgid "Jarno suggested the following HTML output::"
msgstr "Jarno suggested the following HTML output::"

#: ../../source/dev/alternatives.rst:1437
msgid ""
"The ``<br class=\"hidden\" />`` and ``<span "
"class=\"hidden\">&nbsp;</span>`` are meant to support non-CSS and non-"
"graphical browsers.  I understand the case for \"br\", but I'm not so "
"sure about hidden \"&nbsp;\".  I question how much effort should be put "
"toward supporting non-graphical and especially non-CSS browsers, at least"
" for html4css1.py output."
msgstr ""

#: ../../source/dev/alternatives.rst:1444
msgid ""
"Should the lines themselves be ``<span>`` or ``<div>``?  I don't like "
"mixing inline and block-level elements."
msgstr ""

#: ../../source/dev/alternatives.rst:1449
msgid "Implementation Plan"
msgstr "Implementation Plan"

#: ../../source/dev/alternatives.rst:1451
msgid ""
"We'll leave the old implementation in place (via the \"line-block\" "
"directive only) until all Writers have been updated to support the new "
"syntax & implementation.  The \"line-block\" directive can then be "
"updated to use the new internal representation, and its documentation "
"will be updated to recommend the new syntax."
msgstr ""

#: ../../source/dev/alternatives.rst:1459
msgid "List-Driven Tables"
msgstr "List-Driven Tables"

#: ../../source/dev/alternatives.rst:1461
msgid "The original idea came from Dylan Jay:"
msgstr "The original idea came from Dylan Jay:"

#: ../../source/dev/alternatives.rst:1463
msgid ""
"... to use a two level bulleted list with something to indicate it should"
" be rendered as a table ..."
msgstr ""

#: ../../source/dev/alternatives.rst:1466
msgid ""
"It's an interesting idea.  It could be implemented in as a directive "
"which transforms a uniform two-level list into a table.  Using a "
"directive would allow the author to explicitly set the table's "
"orientation (by column or by row), the presence of row headers, etc."
msgstr ""

#: ../../source/dev/alternatives.rst:1471
msgid "Alternatives:"
msgstr "Alternatives:"

#: ../../source/dev/alternatives.rst:1473
msgid "(Implemented in Docutils 0.3.8)."
msgstr "(Implemented in Docutils 0.3.8)."

#: ../../source/dev/alternatives.rst:1475
msgid "Bullet-list-tables might look like this::"
msgstr "Bullet-list-tables might look like this::"

#: ../../source/dev/alternatives.rst:1493
msgid "This list must be written in two levels.  This wouldn't work::"
msgstr "This list must be written in two levels.  This wouldn't work::"

#: ../../source/dev/alternatives.rst:1512
msgid ""
"The above is a single list of 12 items.  The blank lines are not "
"significant to the markup.  We'd have to explicitly specify how many "
"columns or rows to use, which isn't a good idea."
msgstr ""

#: ../../source/dev/alternatives.rst:1516
msgid ""
"Beni Cherniavsky suggested a field list alternative.  It could look like "
"this::"
msgstr ""

#: ../../source/dev/alternatives.rst:1535
msgid ""
"Column order is determined from the order of fields in the first row.  "
"Field order in all other rows is ignored.  As a side-effect, this allows "
"trivial re-arrangement of columns.  By using named fields, it becomes "
"possible to omit fields in some rows without losing track of things, "
"which is important for spans."
msgstr ""

#: ../../source/dev/alternatives.rst:1541
msgid ""
"An alternative to two-level bullet lists would be to use enumerated lists"
" for the table cells::"
msgstr ""

#: ../../source/dev/alternatives.rst:1557
msgid ""
"That provides better correspondence between cells in the same column than"
" does bullet-list syntax, but not as good as field list syntax.  I think "
"that were only field-list-tables available, a lot of users would use the "
"equivalent degenerate case::"
msgstr ""

#: ../../source/dev/alternatives.rst:1568
msgid ""
"Another natural variant is to allow a description list with field lists "
"as descriptions::"
msgstr ""

#: ../../source/dev/alternatives.rst:1585
msgid ""
"This would make the whole first column a header column (\"stub\"). It's "
"limited to a single column and a single paragraph fitting on one source "
"line.  Also it wouldn't allow for empty cells or row spans in the first "
"column.  But these are limitations that we could live with, like those of"
" simple tables."
msgstr ""

#: ../../source/dev/alternatives.rst:1591
msgid ""
"The List-driven table feature could be done in many ways.  Each user will"
" have their preferred usage.  Perhaps a single \"list-table\" directive "
"could handle them all, depending on which options and content are "
"present."
msgstr ""

#: ../../source/dev/alternatives.rst:1596
msgid "Issues:"
msgstr "Issues:"

#: ../../source/dev/alternatives.rst:1598
msgid "How to indicate that there's 1 header row?  Perhaps two lists?  ::"
msgstr "How to indicate that there's 1 header row?  Perhaps two lists?  ::"

#: ../../source/dev/alternatives.rst:1610
msgid ""
"This is probably too subtle though.  Better would be a directive option, "
"like ``:headrows: 1``.  An early suggestion for the header row(s) was to "
"use a directive option::"
msgstr ""

#: ../../source/dev/alternatives.rst:1623
msgid "But the table data is at two levels and looks inconsistent."
msgstr "But the table data is at two levels and looks inconsistent."

#: ../../source/dev/alternatives.rst:1625
msgid ""
"In general, we cannot extract the header row from field lists' field "
"names because field names cannot contain everything one might put in a "
"table cell.  A separate header row also allows shorter field names and "
"doesn't force one to rewrite the whole table when the header text "
"changes.  But for simpler cases, we can offer a \":header: fields\" "
"option, which does extract header cells from field names::"
msgstr ""

#: ../../source/dev/alternatives.rst:1639
msgid "How to indicate the column widths?  A directive option? ::"
msgstr "How to indicate the column widths?  A directive option? ::"

#: ../../source/dev/alternatives.rst:1644
msgid "Automatic defaults from the text used?"
msgstr "Automatic defaults from the text used?"

#: ../../source/dev/alternatives.rst:1646
msgid "How to handle row and/or column spans?"
msgstr "How to handle row and/or column spans?"

#: ../../source/dev/alternatives.rst:1648
msgid ""
"In a field list, column-spans can be indicated by specifying the first "
"and last fields, separated by space-dash-space or ellipsis::"
msgstr ""

#: ../../source/dev/alternatives.rst:1654
msgid "Commas were proposed for column spans::"
msgstr "Commas were proposed for column spans::"

#: ../../source/dev/alternatives.rst:1658
msgid ""
"But non-adjacent columns become problematic.  Should we report an error, "
"or duplicate the value into each span of adjacent columns (as was "
"suggested)?  The latter suggestion is appealing but may be too clever.  "
"Best perhaps to simply specify the two ends."
msgstr ""

#: ../../source/dev/alternatives.rst:1663
msgid ""
"It was suggested that comma syntax should be allowed, too, in order to "
"allow the user to avoid trouble when changing the column order. But "
"changing the column order of a table with spans is not trivial; we "
"shouldn't make it easier to mess up."
msgstr ""

#: ../../source/dev/alternatives.rst:1668
msgid ""
"One possible syntax for row-spans is to simply treat any row where a "
"field is missing as a row-span from the last row where it appeared. "
"Leaving a field empty would still be possible by writing a field with "
"empty content.  But this is too implicit."
msgstr ""

#: ../../source/dev/alternatives.rst:1673
msgid ""
"Another way would be to require an explicit continuation marker "
"(``...``/``-\"-``/``\"``?) in all but the first row of a spanned field.  "
"Empty comments could work (\"..\").  If implemented, the same marker "
"could also be supported in simple tables, which lack row-spanning "
"abilities."
msgstr ""

#: ../../source/dev/alternatives.rst:1679
msgid "Explicit markup like \":rowspan:\" and \":colspan:\" was also suggested."
msgstr "Explicit markup like \":rowspan:\" and \":colspan:\" was also suggested."

#: ../../source/dev/alternatives.rst:1681
msgid ""
"Sometimes in a table, the first header row contains spans.  It may be "
"necessary to provide a way to specify the column field names "
"independently of data rows.  A directive option would do it."
msgstr ""

#: ../../source/dev/alternatives.rst:1685
msgid ""
"We could specify \"column-wise\" or \"row-wise\" ordering, with the same "
"markup structure.  For example, with definition data::"
msgstr ""

#: ../../source/dev/alternatives.rst:1702
msgid "A syntax for _`stubs in grid tables` is easy to imagine::"
msgstr "A syntax for _`stubs in grid tables` is easy to imagine::"

#: ../../source/dev/alternatives.rst:1710
msgid "Or this idea from Nick Moffitt::"
msgstr "Or this idea from Nick Moffitt::"

#: ../../source/dev/alternatives.rst:1722
msgid "Auto-Enumerated Lists"
msgstr "Auto-Enumerated Lists"

#: ../../source/dev/alternatives.rst:1724
msgid "Implemented 2005-03-24: combination of variation 1 & 2."
msgstr "Implemented 2005-03-24: combination of variation 1 & 2."

#: ../../source/dev/alternatives.rst:1726
msgid ""
"The advantage of auto-numbered enumerated lists would be similar to that "
"of auto-numbered footnotes: lists could be written and rearranged without"
" having to manually renumber them.  The disadvantages are also the same: "
"input and output wouldn't match exactly; the markup may be ugly or "
"confusing (depending on which alternative is chosen)."
msgstr ""

#: ../../source/dev/alternatives.rst:1732
msgid "Use the \"#\" symbol.  Example::"
msgstr "Use the \"#\" symbol.  Example::"

#: ../../source/dev/alternatives.rst:1738
msgid ""
"Advantages: simple, explicit.  Disadvantage: enumeration sequence cannot "
"be specified (limited to arabic numerals); ugly."
msgstr ""

#: ../../source/dev/alternatives.rst:1741
msgid ""
"As a variation on #1, first initialize the enumeration sequence? For "
"example::"
msgstr ""

#: ../../source/dev/alternatives.rst:1748
msgid ""
"Advantages: simple, explicit, any enumeration sequence possible. "
"Disadvantages: ugly; perhaps confusing with mixed concrete/abstract "
"enumerators."
msgstr ""

#: ../../source/dev/alternatives.rst:1752
msgid "Alternative suggested by Fred Bremmer, from experience with MoinMoin::"
msgstr "Alternative suggested by Fred Bremmer, from experience with MoinMoin::"

#: ../../source/dev/alternatives.rst:1758
msgid ""
"Advantages: enumeration sequence is explicit (could be multiple \"a.\" or"
" \"(I)\" tokens).  Disadvantages: perhaps confusing; otherwise erroneous "
"input (e.g., a duplicate item \"1.\") would pass silently, either causing"
" a problem later in the list (if no blank lines between items) or "
"creating two lists (with blanks)."
msgstr ""

#: ../../source/dev/alternatives.rst:1764
msgid "Take this input for example::"
msgstr "Take this input for example::"

#: ../../source/dev/alternatives.rst:1772
msgid ""
"Currently the parser will produce two list, \"1\" and \"1,2\" (no "
"warnings, because of the presence of blank lines).  Using Fred's "
"notation, the current behavior is \"1,1,2 -> 1 1,2\" (without blank lines"
" between items, it would be \"1,1,2 -> 1 [WARNING] 1,2\").  What should "
"the behavior be with auto-numbering?"
msgstr ""

#: ../../source/dev/alternatives.rst:1778
msgid "Fred has produced a patch__, whose initial behavior is as follows::"
msgstr "Fred has produced a patch__, whose initial behavior is as follows::"

#: ../../source/dev/alternatives.rst:1786
msgid "(After the \"[WARNING]\", the \"3\" would begin a new list.)"
msgstr "(After the \"[WARNING]\", the \"3\" would begin a new list.)"

#: ../../source/dev/alternatives.rst:1788
msgid ""
"I have mixed feelings about adding this functionality to the spec & "
"parser.  It would certainly be useful to some users (myself included; I "
"often have to renumber lists).  Perhaps it's too clever, asking the "
"parser to guess too much.  What if you *do* want three one-item lists in "
"a row, each beginning with \"1.\"?  You'd have to use empty comments to "
"force breaks.  Also, I question whether \"1,2,2 -> 1,2,3\" is optimal "
"behavior."
msgstr ""

#: ../../source/dev/alternatives.rst:1796
msgid ""
"In response, Fred came up with \"a stricter and more explicit rule "
"[which] would be to only auto-number silently if *all* the enumerators of"
" a list were identical\".  In that case::"
msgstr ""

#: ../../source/dev/alternatives.rst:1806
msgid ""
"Should any start-value be allowed (\"3,3,3\"), or should auto-numbered "
"lists be limited to begin with ordinal-1 (\"1\", \"A\", \"a\", \"I\", or "
"\"i\")?"
msgstr ""

#: ../../source/dev/alternatives.rst:1813
msgid "Alternative proposed by Tony Ibbs::"
msgstr "Alternative proposed by Tony Ibbs::"

#: ../../source/dev/alternatives.rst:1819
msgid ""
"The initial proposal required unique enumerators within a list, but this "
"limits the convenience of a feature of already limited applicability and "
"convenience.  Not a useful requirement; dropped."
msgstr ""

#: ../../source/dev/alternatives.rst:1823
msgid ""
"Instead, simply prepend a \"#\" to a standard list enumerator to indicate"
" auto-enumeration.  The numbers (or letters) of the enumerators "
"themselves are not significant, except:"
msgstr ""

#: ../../source/dev/alternatives.rst:1827
msgid "as a sequence indicator (arabic, roman, alphabetic; upper/lower),"
msgstr "as a sequence indicator (arabic, roman, alphabetic; upper/lower),"

#: ../../source/dev/alternatives.rst:1829
msgid "and perhaps as a start value (first list item)."
msgstr "and perhaps as a start value (first list item)."

#: ../../source/dev/alternatives.rst:1831
msgid ""
"Advantages: explicit, any enumeration sequence possible. Disadvantages: a"
" bit ugly."
msgstr ""

#: ../../source/dev/alternatives.rst:1836
msgid "Adjacent citation references"
msgstr "Adjacent citation references"

#: ../../source/dev/alternatives.rst:1838
msgid ""
"A special case for inline markup was proposed and implemented: multiple "
"citation references could be joined into one::"
msgstr ""

#: ../../source/dev/alternatives.rst:1843
msgid ""
"However, this was rejected as an unwarranted exception to the rules for "
"inline markup. (The main motivation for the proposal, grouping citations "
"in the latex writer, was implemented by recognising the second group in "
"the example above and transforming it into ``\\cite{cite1,cite2}``.)"
msgstr ""

#: ../../source/dev/alternatives.rst:1851
msgid "Inline markup recognition"
msgstr "Inline markup recognition"

#: ../../source/dev/alternatives.rst:1853
msgid ""
"Implemented 2011-12-05 (version 0.9): Extended `inline markup recognition"
" rules`_."
msgstr ""

#: ../../source/dev/alternatives.rst:1856
msgid ""
"Non-ASCII whitespace, punctuation characters and \"international\" quotes"
" are allowed around inline markup (based on `Unicode categories`_). The "
"rules for ASCII characters were not changed."
msgstr ""

#: ../../source/dev/alternatives.rst:1860
msgid "Rejected alternatives:"
msgstr "Rejected alternatives:"

#: ../../source/dev/alternatives.rst:1862
msgid "Use `Unicode categories`_ for all chars (ASCII or not)"
msgstr "Use `Unicode categories`_ for all chars (ASCII or not)"

#: ../../source/dev/alternatives.rst:1864
msgid "comprehensible, standards based,"
msgstr "comprehensible, standards based,"

#: ../../source/dev/alternatives.rst:1865
msgid "many \"false positives\" need escaping,"
msgstr "many \"false positives\" need escaping,"

#: ../../source/dev/alternatives.rst:1866
msgid "not backwards compatible."
msgstr "not backwards compatible."

#: ../../source/dev/alternatives.rst:1868
msgid "full backwards compatibility"
msgstr "full backwards compatibility"

#: ../../source/dev/alternatives.rst
msgid "Pi"
msgstr "Pi"

#: ../../source/dev/alternatives.rst:1870
msgid "only before start-string"
msgstr "only before start-string"

#: ../../source/dev/alternatives.rst
msgid "Pf"
msgstr "Pf"

#: ../../source/dev/alternatives.rst:1871
msgid "only behind end-string"
msgstr "only behind end-string"

#: ../../source/dev/alternatives.rst
msgid "Po"
msgstr "Po"

#: ../../source/dev/alternatives.rst:1872
msgid "\"conservative\" sorting of other punctuation:"
msgstr "\"conservative\" sorting of other punctuation:"

#: ../../source/dev/alternatives.rst
msgid "``.,;!?\\\\``"
msgstr "``.,;!?\\\\``"

#: ../../source/dev/alternatives.rst:1874
msgid "Close"
msgstr "Close"

#: ../../source/dev/alternatives.rst
msgid "``隆驴``"
msgstr "``隆驴``"

#: ../../source/dev/alternatives.rst:1875
msgid "Open"
msgstr "Open"

#: ../../source/dev/alternatives.rst:1877
msgid "backwards compatible,"
msgstr "backwards compatible,"

#: ../../source/dev/alternatives.rst:1878
msgid "logical extension of the existing rules,"
msgstr "logical extension of the existing rules,"

#: ../../source/dev/alternatives.rst:1879
msgid "exception list for \"other\" punctuation needed,"
msgstr "exception list for \"other\" punctuation needed,"

#: ../../source/dev/alternatives.rst:1880
msgid "rules even more complicated,"
msgstr "rules even more complicated,"

#: ../../source/dev/alternatives.rst:1881
msgid ""
"not clear how to sort \"other\" punctuation that is currently not "
"recognized,"
msgstr ""

#: ../../source/dev/alternatives.rst:1883
msgid ""
"international quoting convention like 禄German 鈥篴ngular鈥� quotes芦 not "
"recognized."
msgstr ""

#: ../../source/dev/alternatives.rst:1894
msgid "Not Implemented"
msgstr "Not Implemented"

#: ../../source/dev/alternatives.rst:1897
msgid "Reworking Footnotes"
msgstr "Reworking Footnotes"

#: ../../source/dev/alternatives.rst:1899
msgid ""
"As a further wrinkle (see `Reworking Explicit Markup (Round 1)`_ above), "
"in the wee hours of 2002-02-28 I posted several ideas for changes to "
"footnote syntax:"
msgstr ""

#: ../../source/dev/alternatives.rst:1903
msgid "Change footnote syntax from ``.. [1]`` to ``_[1]``? ..."
msgstr "Change footnote syntax from ``.. [1]`` to ``_[1]``? ..."

#: ../../source/dev/alternatives.rst:1904
msgid ""
"Differentiate (with new DTD elements) author-date \"citations\" "
"(``[GVR2002]``) from numbered footnotes? ..."
msgstr ""

#: ../../source/dev/alternatives.rst:1906
msgid "Render footnote references as superscripts without \"[]\"? ..."
msgstr "Render footnote references as superscripts without \"[]\"? ..."

#: ../../source/dev/alternatives.rst:1908
msgid ""
"These ideas are all related, and suggest changes in the reStructuredText "
"syntax as well as the docutils tree model."
msgstr ""

#: ../../source/dev/alternatives.rst:1911
msgid ""
"The footnote has been used for both true footnotes (asides expanding on "
"points or defining terms) and for citations (references to external "
"works).  Rather than dealing with one amalgam construct, we could "
"separate the current footnote concept into strict footnotes and "
"citations.  Citations could be interpreted and treated differently from "
"footnotes.  Footnotes would be limited to numerical labels: manual "
"(\"1\") and auto-numbered (anonymous \"#\", named \"#label\")."
msgstr ""

#: ../../source/dev/alternatives.rst:1919
msgid ""
"The footnote is the only explicit markup construct (starts with \".. \") "
"that directly translates to a visible body element.  I've always been a "
"little bit uncomfortable with the \".. \" marker for footnotes because of"
" this; \".. \" has a connotation of \"special\", but footnotes aren't "
"especially \"special\".  Printed texts often put footnotes at the bottom "
"of the page where the reference occurs (thus \"foot note\").  Some HTML "
"designs would leave footnotes to be rendered the same positions where "
"they're defined.  Other online and printed designs will gather footnotes "
"into a section near the end of the document, converting them to "
"\"endnotes\" (perhaps using a directive in our case); but this \"special "
"processing\" is not an intrinsic property of the footnote itself, but a "
"decision made by the document author or processing system."
msgstr ""

#: ../../source/dev/alternatives.rst:1933
msgid ""
"Citations are almost invariably collected in a section at the end of a "
"document or section.  Citations \"disappear\" from where they are defined"
" and are magically reinserted at some well-defined point. There's more of"
" a connection to the \"special\" connotation of the \".. \" syntax.  The "
"point at which the list of citations is inserted could be defined "
"manually by a directive (e.g., \".. citations::\"), and/or have default "
"behavior (e.g., a section automatically inserted at the end of the "
"document) that might be influenced by options to the Writer."
msgstr ""

#: ../../source/dev/alternatives.rst:1942
msgid "Syntax proposals:"
msgstr "Syntax proposals:"

#: ../../source/dev/alternatives.rst:1944
msgid "Footnotes:"
msgstr "Footnotes:"

#: ../../source/dev/alternatives.rst:1946
#: ../../source/dev/alternatives.rst:1988
msgid "Current syntax::"
msgstr "Current syntax::"

#: ../../source/dev/alternatives.rst:1952
msgid ""
"The syntax proposed in the original 2002-02-28 Doc-SIG post: remove the "
"\".. \", prefix a \"_\"::"
msgstr ""

#: ../../source/dev/alternatives.rst:1959
msgid ""
"The leading underscore syntax (earlier dropped because ``.. _[1]:`` was "
"too verbose) is a useful reminder that footnotes are hyperlink targets."
msgstr ""

#: ../../source/dev/alternatives.rst:1963
msgid ""
"Minimal syntax: remove the \".. [\" and \"]\", prefix a \"_\", and suffix"
" a \".\"::"
msgstr ""

#: ../../source/dev/alternatives.rst:1973
msgid "Footnotes could be rendered something like this in HTML"
msgstr "Footnotes could be rendered something like this in HTML"

#: ../../source/dev/alternatives.rst
msgid "1. This is a footnote.  The brackets could be dropped"
msgstr "1. This is a footnote.  The brackets could be dropped"

#: ../../source/dev/alternatives.rst
msgid "from the label, and a vertical bar could set them"
msgstr "from the label, and a vertical bar could set them"

#: ../../source/dev/alternatives.rst
msgid "off from the rest of the document in the HTML."
msgstr "off from the rest of the document in the HTML."

#: ../../source/dev/alternatives.rst:1979
msgid ""
"Two-way hyperlinks on the footnote marker (\"1.\" above) would also help "
"to differentiate footnotes from enumerated lists."
msgstr ""

#: ../../source/dev/alternatives.rst:1982
msgid ""
"If converted to endnotes (by a directive/transform), a horizontal half-"
"line might be used instead.  Page-oriented output formats would typically"
" use the horizontal line for true footnotes."
msgstr ""

#: ../../source/dev/alternatives.rst:1986
msgid "Footnote references:"
msgstr "Footnote references:"

#: ../../source/dev/alternatives.rst:1992
msgid "Minimal syntax to match the minimal footnote syntax above::"
msgstr "Minimal syntax to match the minimal footnote syntax above::"

#: ../../source/dev/alternatives.rst:1996
msgid ""
"As a consequence, pure-numeric hyperlink references would not be "
"possible; they'd be interpreted as footnote references."
msgstr ""

#: ../../source/dev/alternatives.rst:1999
msgid ""
"Citation references: no change is proposed from the current footnote "
"reference syntax::"
msgstr ""

#: ../../source/dev/alternatives.rst:2004
msgid "Citations:"
msgstr "Citations:"

#: ../../source/dev/alternatives.rst:2006
msgid "Current syntax (footnote syntax)::"
msgstr "Current syntax (footnote syntax)::"

#: ../../source/dev/alternatives.rst:2011
msgid "Possible new syntax::"
msgstr "Possible new syntax::"

#: ../../source/dev/alternatives.rst:2020
msgid ""
"Without the \".. \" marker, subsequent lines would either have to align "
"as in one of the above, or we'd have to allow loose alignment (I'd rather"
" not)::"
msgstr ""

#: ../../source/dev/alternatives.rst:2027
msgid ""
"I proposed adopting the \"minimal\" syntax for footnotes and footnote "
"references, and adding citations and citation references to "
"reStructuredText's repertoire.  The current footnote syntax for citations"
" is better than the alternatives given."
msgstr ""

#: ../../source/dev/alternatives.rst:2032
msgid "From a reply by Tony Ibbs on 2002-03-01:"
msgstr "From a reply by Tony Ibbs on 2002-03-01:"

#: ../../source/dev/alternatives.rst:2034
msgid "However, I think easier with examples, so let's create one::"
msgstr "However, I think easier with examples, so let's create one::"

#: ../../source/dev/alternatives.rst:2053
msgid "and look at it with the second syntax proposal::"
msgstr "and look at it with the second syntax proposal::"

#: ../../source/dev/alternatives.rst:2072
msgid ""
"(I note here that if I have gotten the indentation of the footnotes "
"themselves correct, this is clearly not as nice.  And if the indentation "
"should be to the left margin instead, I like that even less)."
msgstr ""

#: ../../source/dev/alternatives.rst:2077
msgid "and the third (new) proposal::"
msgstr "and the third (new) proposal::"

#: ../../source/dev/alternatives.rst:2096
msgid ""
"I think I don't, in practice, mind the targets too much (the use of a dot"
" after the number helps a lot here), but I do have a problem with the "
"body text, in that I don't naturally separate out the footnotes as "
"different than the rest of the text - instead I keep wondering why there "
"are numbers interspered in the text.  The use of brackets around the "
"numbers ([ and ]) made me somehow parse the footnote references as "
"\"odd\" - i.e., not part of the body text - and thus both easier to skip,"
" and also (paradoxically) easier to pick out so that I could follow them."
msgstr ""

#: ../../source/dev/alternatives.rst:2106
msgid ""
"Thus, for the moment (and as always susceptable to argument), I'd say -1 "
"on the new form of footnote reference (i.e., I much prefer the existing "
"``[1]_`` over the proposed ``1_``), and ambivalent over the proposed "
"target change."
msgstr ""

#: ../../source/dev/alternatives.rst:2111
msgid ""
"That leaves David's problem of wanting to distinguish footnotes and "
"citations - and the only thing I can propose there is that footnotes are "
"numeric or # and citations are not (which, as a human being, I can "
"probably cope with!)."
msgstr ""

#: ../../source/dev/alternatives.rst:2116
msgid "From a reply by Paul Moore on 2002-03-01:"
msgstr "From a reply by Paul Moore on 2002-03-01:"

#: ../../source/dev/alternatives.rst:2118
msgid ""
"I think the current footnote syntax ``[1]_`` is *exactly* the right "
"balance of distinctness vs unobtrusiveness.  I very definitely don't "
"think this should change."
msgstr ""

#: ../../source/dev/alternatives.rst:2122
msgid "On the target change, it doesn't matter much to me."
msgstr "On the target change, it doesn't matter much to me."

#: ../../source/dev/alternatives.rst:2124
msgid ""
"From a further reply by Tony Ibbs on 2002-03-01, referring to the \"[1]\""
" form and actual usage in email:"
msgstr ""

#: ../../source/dev/alternatives.rst:2127
msgid ""
"Clearly this is a form people are used to, and thus we should consider it"
" strongly (in the same way that the usage of ``*..*`` to mean emphasis "
"was taken partly from email practise)."
msgstr ""

#: ../../source/dev/alternatives.rst:2131
msgid ""
"Equally clearly, there is something \"magical\" for people in the use of "
"a similar form (i.e., ``[1]``) for both footnote reference and footnote "
"target - it seems natural to keep them similar."
msgstr ""

#: ../../source/dev/alternatives.rst:2135
msgid "..."
msgstr "..."

#: ../../source/dev/alternatives.rst:2137
msgid ""
"I think that this established plaintext usage leads me to strongly "
"believe we should retain square brackets at both ends of a footnote.  The"
" markup of the reference end (a single trailing underscore) seems about "
"as minimal as we can get away with.  The markup of the target end depends"
" on how one envisages the thing - if \"..\" means \"I am a target\" (as I"
" tend to see it), then that's good, but one can also argue that the "
"\"_[1]\" syntax has a neat symmetry with the footnote reference itself, "
"if one wishes (in which case \"..\" presumably means \"hidden/special\" "
"as David seems to think, which is why one needs a \"..\" *and* a leading "
"underline for hyperlink targets."
msgstr ""

#: ../../source/dev/alternatives.rst:2149
msgid ""
"Given the persuading arguments voiced, we'll leave footnote & footnote "
"reference syntax alone.  Except that these discussions gave rise to the "
"\"auto-symbol footnote\" concept, which has been added.  Citations and "
"citation references have also been added."
msgstr ""

#: ../../source/dev/alternatives.rst:2156
msgid "Syntax for Questions & Answers"
msgstr "Syntax for Questions & Answers"

#: ../../source/dev/alternatives.rst:2158
msgid ""
"Implement as a generic two-column marked list?  As a standalone (non-"
"directive) construct?  (Is the markup ambiguous?)  Add support to "
"parts.contents?"
msgstr ""

#: ../../source/dev/alternatives.rst:2162
msgid "New elements would be required.  Perhaps::"
msgstr "New elements would be required.  Perhaps::"

#: ../../source/dev/alternatives.rst:2173
msgid "Originally I thought of implementing a Q&A list with special syntax::"
msgstr "Originally I thought of implementing a Q&A list with special syntax::"

#: ../../source/dev/alternatives.rst:2184
msgid ""
"Where each \"Q\" and \"A\" could also be numbered (e.g., \"Q1\").  "
"However, a simple enumerated or bulleted list will do just fine for "
"syntax.  A directive could treat the list specially; e.g. the first "
"paragraph could be treated as a question, the remainder as the answer "
"(multiple answers could be represented by nested lists).  Without special"
" syntax, this directive becomes low priority."
msgstr ""

#: ../../source/dev/alternatives.rst:2191
msgid ""
"As described in the FAQ__, no special syntax or directive is needed for "
"this application."
msgstr ""

#: ../../source/dev/alternatives.rst:2200
msgid "Tabled"
msgstr "Tabled"

#: ../../source/dev/alternatives.rst:2203
msgid "Reworking Explicit Markup (Round 2)"
msgstr "Reworking Explicit Markup (Round 2)"

#: ../../source/dev/alternatives.rst:2205
msgid "See `Reworking Explicit Markup (Round 1)`_ for an earlier discussion."
msgstr "See `Reworking Explicit Markup (Round 1)`_ for an earlier discussion."

#: ../../source/dev/alternatives.rst:2207
msgid ""
"In April 2004, a new thread becan on docutils-develop: `Inconsistency in "
"RST markup`__.  Several arguments were made; the first argument begat "
"later arguments.  Below, the arguments are paraphrased \"in quotes\", "
"with responses."
msgstr ""

#: ../../source/dev/alternatives.rst:2214
msgid "References and targets take this form::"
msgstr "References and targets take this form::"

#: ../../source/dev/alternatives.rst:2220
msgid ""
"But footnotes, \"which generate links just like targets do\", are written"
" as::"
msgstr ""

#: ../../source/dev/alternatives.rst:2227
msgid "\"Footnotes should be written as\"::"
msgstr "\"Footnotes should be written as\"::"

#: ../../source/dev/alternatives.rst:2233
msgid ""
"But they're not the same type of animal.  That's not a \"footnote "
"target\", it's a *footnote*.  Being a target is not a footnote's primary "
"purpose (an arguable point).  It just happens to grow a target "
"automatically, for convenience.  Just as a section title::"
msgstr ""

#: ../../source/dev/alternatives.rst:2241
msgid ""
"isn't a \"title target\", it's a *title*, which happens to grow a target "
"automatically.  The consistency is there, it's just deeper than at first "
"glance."
msgstr ""

#: ../../source/dev/alternatives.rst:2245
msgid ""
"Also, \".. [1]\" was chosen for footnote syntax because it closely "
"resembles one form of actual footnote rendering.  \".. _[1]:\" is too "
"verbose; excessive punctuation is required to get the job done."
msgstr ""

#: ../../source/dev/alternatives.rst:2249
msgid ""
"For more of the reasoning behind the syntax, see `Problems With "
"StructuredText (Hyperlinks) <problems.html#hyperlinks>`__ and `Reworking "
"Footnotes`_."
msgstr ""

#: ../../source/dev/alternatives.rst:2253
msgid ""
"\"I expect directives to also look like ``.. this:`` [one colon] because "
"that also closely parallels the link and footnote target markup.\""
msgstr ""

#: ../../source/dev/alternatives.rst:2257
msgid "There are good reasons for the two-colon syntax:"
msgstr "There are good reasons for the two-colon syntax:"

#: ../../source/dev/alternatives.rst:2259
msgid "Two colons are used after the directive type for these reasons:"
msgstr "Two colons are used after the directive type for these reasons:"

#: ../../source/dev/alternatives.rst:2261
msgid "Two colons are distinctive, and unlikely to be used in common text."
msgstr "Two colons are distinctive, and unlikely to be used in common text."

#: ../../source/dev/alternatives.rst:2264
msgid "Two colons avoids clashes with common comment text like::"
msgstr "Two colons avoids clashes with common comment text like::"

#: ../../source/dev/alternatives.rst:2268
msgid ""
"If an implementation of reStructuredText does not recognize a directive "
"(i.e., the directive-handler is not installed), a level-3 (error) system "
"message is generated, and the entire directive block (including the "
"directive itself) will be included as a literal block.  Thus \"::\" is a "
"natural choice."
msgstr ""

#: ../../source/dev/alternatives.rst:2277
msgid ""
"The last reason is not particularly compelling; it's more of a convenient"
" coincidence or mnemonic."
msgstr ""

#: ../../source/dev/alternatives.rst:2280
msgid ""
"\"Comments always seemed too easy.  I almost never write comments. I'd "
"have no problem writing '.. comment:' in front of my comments. In fact, "
"it would probably be more readable, as comments *should* be set off "
"strongly, because they are very different from normal text.\""
msgstr ""

#: ../../source/dev/alternatives.rst:2286
msgid ""
"Many people do use comments though, and some applications of "
"reStructuredText require it.  For example, all reStructuredText PEPs (and"
" this document!) have an Emacs stanza at the bottom, in a comment.  "
"Having to write \".. comment::\" would be very obtrusive."
msgstr ""

#: ../../source/dev/alternatives.rst:2291
msgid ""
"Comments *should* be dirt-easy to do.  It should be easy to \"comment "
"out\" a block of text.  Comments in programming languages and other "
"markup languages are invariably easy."
msgstr ""

#: ../../source/dev/alternatives.rst:2295
msgid ""
"Any author is welcome to preface their comments with \"Comment:\" or \"Do"
" Not Print\" or \"Note to Editor\" or anything they like.  A \"comment\" "
"directive could easily be implemented.  It might be confused with "
"admonition directives, like \"note\" and \"caution\" though.  In "
"unrelated (and unpublished and unfinished) work, adding a \"comment\" "
"directive as a true document element was considered::"
msgstr ""

#: ../../source/dev/alternatives.rst:2306
msgid ""
"\"One of the goals of reStructuredText is to be *readable* by people who "
"don't know it.  This construction violates that: it is not at all obvious"
" to the uninitiated that text marked by '..' is a comment.  On the other "
"hand, '.. comment:' would be totally transparent.\""
msgstr ""

#: ../../source/dev/alternatives.rst:2312
msgid ""
"Totally transparent, perhaps, but also very obtrusive.  Another of "
"`reStructuredText's goals`_ is to be unobtrusive, and \".. comment::\" "
"would violate that.  The goals of reStructuredText are many, and they "
"conflict.  Determining the right set of goals and finding solutions that "
"best fit is done on a case-by-case basis."
msgstr ""

#: ../../source/dev/alternatives.rst:2319
msgid ""
"Even readability is has two aspects.  Being readable without any prior "
"knowledge is one.  Being as easily read in raw form as in processed form "
"is the other.  \"..\" may not contribute to the former aspect, but \".. "
"comment::\" would certainly detract from the latter."
msgstr ""

#: ../../source/dev/alternatives.rst:2327
msgid ""
"\"Recently I sent someone an rst document, and they got confused; I had "
"to explain to them that '..' marks comments, *unless* it's a directive, "
"etc...\""
msgstr ""

#: ../../source/dev/alternatives.rst:2331
msgid ""
"The explanation of directives *is* roundabout, defining comments in terms"
" of not being other things.  That's definitely a wart."
msgstr ""

#: ../../source/dev/alternatives.rst:2334
msgid ""
"\"Under the current system, a mistyped directive (with ':' instead of "
"'::') will be silently ignored.  This is an error that could easily go "
"unnoticed.\""
msgstr ""

#: ../../source/dev/alternatives.rst:2338
msgid "A parser option/setting like \"--comments-on-stderr\" would help."
msgstr "A parser option/setting like \"--comments-on-stderr\" would help."

#: ../../source/dev/alternatives.rst:2340
msgid ""
"\"I'd prefer to see double-dot-space / command / double-colon as the "
"standard Docutils markup-marker.  It's unusual enough to avoid being "
"accidently used.  Everything that starts with a double-dot should end "
"with a double-colon.\""
msgstr ""

#: ../../source/dev/alternatives.rst:2345
msgid ""
"That would increase the punctuation verbosity of some constructs "
"considerably."
msgstr ""

#: ../../source/dev/alternatives.rst:2348
msgid "Edward Loper proposed the following plan for backwards compatibility:"
msgstr "Edward Loper proposed the following plan for backwards compatibility:"

#: ../../source/dev/alternatives.rst:2351
msgid ""
"\".. foo\" will generate a deprecation warning to stderr, and nothing in "
"the output (no system messages)."
msgstr ""

#: ../../source/dev/alternatives.rst:2353
msgid ""
"\".. foo: bar\" will be treated as a directive foo.  If there is no foo "
"directive, then do the normal error output."
msgstr ""

#: ../../source/dev/alternatives.rst:2355
msgid ""
"\".. foo:: bar\" will generate a deprecation warning to stderr, and be "
"treated as a directive.  Or leave it valid?"
msgstr ""

#: ../../source/dev/alternatives.rst:2358
msgid ""
"So some existing documents might start printing deprecation warnings, but"
" the only existing documents that would *break* would be ones that say "
"something like::"
msgstr ""

#: ../../source/dev/alternatives.rst:2364
msgid "instead of::"
msgstr "instead of::"

#: ../../source/dev/alternatives.rst:2368
msgid ""
"Here, we're trading fairly common a silent error (directive falsely "
"treated as a comment) for a fairly uncommon explicitly flagged error "
"(comment falsely treated as directive).  To make things even easier, we "
"could add a sentence to the unknown-directive error.  Something like \"If"
" you intended to create a comment, please use '.. comment:' instead\"."
msgstr ""

#: ../../source/dev/alternatives.rst:2375
msgid ""
"On one hand, I understand and sympathize with the points raised.  On the "
"other hand, I think the current syntax strikes the right balance (but I "
"acknowledge a possible lack of objectivity).  On the gripping hand, the "
"comment and directive syntax has become well established, so even if it's"
" a wart, it may be a wart we have to live with."
msgstr ""

#: ../../source/dev/alternatives.rst:2381
msgid ""
"Making any of these changes would cause a lot of breakage or at least "
"deprecation warnings.  I'm not sure the benefit is worth the cost."
msgstr ""

#: ../../source/dev/alternatives.rst:2384
msgid "For now, we'll treat this as an unresolved legacy issue."
msgstr "For now, we'll treat this as an unresolved legacy issue."

#: ../../source/dev/alternatives.rst:2389
msgid "To Do"
msgstr "To Do"

#: ../../source/dev/alternatives.rst:2392
msgid "Nested Inline Markup"
msgstr "Nested Inline Markup"

#: ../../source/dev/alternatives.rst:2394
msgid ""
"These are collected notes on a long-discussed issue.  The original "
"mailing list messages should be referred to for details."
msgstr ""

#: ../../source/dev/alternatives.rst:2397
msgid "In a 2001-10-31 discussion I wrote:"
msgstr "In a 2001-10-31 discussion I wrote:"

#: ../../source/dev/alternatives.rst:2399
msgid ""
"Try, for example, `Ed Loper's 2001-03-21 post`_, which details some rules"
" for nested inline markup. I think the complexity is prohibitive for the "
"marginal benefit. (And if you can understand that tree without going mad,"
" you're a better man than I. ;-)"
msgstr ""

#: ../../source/dev/alternatives.rst:2404
msgid ""
"Inline markup is already fragile. Allowing nested inline markup would "
"only be asking for trouble IMHO. If it proves absolutely necessary, it "
"can be added later. The rules for what can appear inside what must be "
"well thought out first though."
msgstr ""

#: ../../source/dev/alternatives.rst:2414
msgid "In a 2001-11-09 Doc-SIG post, I wrote:"
msgstr "In a 2001-11-09 Doc-SIG post, I wrote:"

#: ../../source/dev/alternatives.rst:2416
msgid ""
"The problem is that in the what-you-see-is-more-or-less-what-you-get "
"markup language that is reStructuredText, the symbols used for inline "
"markup (\"*\", \"**\", \"`\", \"``\", etc.) may preclude nesting."
msgstr ""

#: ../../source/dev/alternatives.rst:2421
msgid ""
"I've rethought this position.  Nested markup is not precluded, just "
"tricky.  People and software parse \"double and 'single' quotes\" all the"
" time.  Continuing,"
msgstr ""

#: ../../source/dev/alternatives.rst:2425
msgid ""
"I've thought over how we might implement nested inline markup. The first "
"algorithm (\"first identify the outer inline markup as we do now, then "
"recursively scan for nested inline markup\") won't work; counterexamples "
"were given in my `last post <http://mail.python.org/pipermail/doc-"
"sig/2001-November/002363.html>`__."
msgstr ""

#: ../../source/dev/alternatives.rst:2431
msgid "The second algorithm makes my head hurt::"
msgstr "The second algorithm makes my head hurt::"

#: ../../source/dev/alternatives.rst:2451
msgid ""
"This is similar to how the parser does section title recognition, but "
"sections are much more regular and deterministic."
msgstr ""

#: ../../source/dev/alternatives.rst:2455
msgid ""
"Bottom line is, I don't think the benefits are worth the effort, even if "
"it is possible. I'm not going to try to write the code, at least not now."
" If somebody codes up a consistent, working, general solution, I'll be "
"happy to consider it."
msgstr ""

#: ../../source/dev/alternatives.rst:2462
msgid ""
"In a `2003-05-06 Docutils-Users post`__ Paul Tremblay proposed a new "
"syntax to allow for easier nesting.  It eventually evolved into this::"
msgstr ""

#: ../../source/dev/alternatives.rst:2468
msgid ""
"The duplication with the existing interpreted text syntax is problematic "
"though."
msgstr ""

#: ../../source/dev/alternatives.rst:2473
msgid "Could the parser be extended to parse nested interpreted text? ::"
msgstr "Could the parser be extended to parse nested interpreted text? ::"

#: ../../source/dev/alternatives.rst:2478
msgid ""
"In a `2003-06-18 Docutils-Develop post`__, Mark Nodine reported on his "
"implementation of a form of nested inline markup in his Perl-based parser"
" (unpublished).  He brought up some interesting ideas.  The "
"implementation was flawed, however, by the change in semantics required "
"for backslash escapes."
msgstr ""

#: ../../source/dev/alternatives.rst:2486
msgid ""
"Docutils-develop threads between David Abrahams, David Goodger, and Mark "
"Nodine (beginning 2004-01-16__ and 2004-01-19__) hashed out many of the "
"details of a potentially successful implementation, as described below.  "
"David Abrahams checked in code to the \"nesting\" branch of CVS, awaiting"
" thorough review."
msgstr ""

#: ../../source/dev/alternatives.rst:2495
msgid ""
"It may be possible to accomplish nested inline markup in general with a "
"more powerful inline markup parser.  There may be some issues, but I'm "
"not averse to the idea of nested inline markup in general.  I just don't "
"have the time or inclination to write a new parser now.  Of course, a "
"good patch would be welcome!"
msgstr ""

#: ../../source/dev/alternatives.rst:2501
msgid ""
"I envisage something like this.  Explicit-role interpreted text must be "
"nestable.  Prefix-based is probably preferred, since suffix-based will "
"look like inline literals::"
msgstr ""

#: ../../source/dev/alternatives.rst:2507
msgid "But it can be disambiguated, so it ought to be left up to the author::"
msgstr "But it can be disambiguated, so it ought to be left up to the author::"

#: ../../source/dev/alternatives.rst:2511
msgid "In addition, other forms of inline markup may be nested if unambiguous::"
msgstr "In addition, other forms of inline markup may be nested if unambiguous::"

#: ../../source/dev/alternatives.rst:2516
msgid "IOW, the parser ought to be as permissive as possible."
msgstr "IOW, the parser ought to be as permissive as possible."

#: ../../source/dev/alternatives.rst:2520
msgid "Index Entries & Indexes"
msgstr "Index Entries & Indexes"

#: ../../source/dev/alternatives.rst:2522
msgid ""
"Were I writing a book with an index, I guess I'd need two different kinds"
" of index targets: inline/implicit and out-of-line/explicit.  For "
"example::"
msgstr ""

#: ../../source/dev/alternatives.rst:2541
msgid ""
"The words \"paragraph\", \"marked\", and \"index\" would become index "
"entries pointing at the words in the first paragraph.  The index entry "
"words appear verbatim in the text.  (Don't worry about the ugly "
"\":index:\" part; if indexing is the only/main application of interpreted"
" text in your documents, it can be implicit and omitted.)  The two "
"directives provide manual indexing, where the index entry words "
"(\"markup\" and \"syntax\") do not appear in the main text.  We could "
"combine the two directives into one::"
msgstr ""

#: ../../source/dev/alternatives.rst:2552
msgid ""
"Semicolons instead of commas because commas could *be* part of the index "
"target, like::"
msgstr ""

#: ../../source/dev/alternatives.rst:2557
msgid ""
"Another reason for index directives is because other inline markup "
"wouldn't be possible within inline index targets."
msgstr ""

#: ../../source/dev/alternatives.rst:2560
msgid "Sometimes index entries have multiple levels.  Given::"
msgstr "Sometimes index entries have multiple levels.  Given::"

#: ../../source/dev/alternatives.rst:2564
msgid ""
"In a hypothetical index, combined with other entries, it might look like "
"this::"
msgstr ""

#: ../../source/dev/alternatives.rst:2573
msgid ""
"Inline multi-level index targets could be done too.  Perhaps something "
"like::"
msgstr ""

#: ../../source/dev/alternatives.rst:2579
msgid "The opposite sense could also be possible::"
msgstr "The opposite sense could also be possible::"

#: ../../source/dev/alternatives.rst:2584
msgid "Also \"see / see also\" index entries."
msgstr "Also \"see / see also\" index entries."

#: ../../source/dev/alternatives.rst:2586
msgid "Given::"
msgstr "Given::"

#: ../../source/dev/alternatives.rst:2592
msgid ""
"(The \"index\" directive above actually targets the *preceding* object.)"
"  The directive should produce something like this XML::"
msgstr ""

#: ../../source/dev/alternatives.rst:2600
msgid "This kind of content model would also allow true inline index-entries::"
msgstr "This kind of content model would also allow true inline index-entries::"

#: ../../source/dev/alternatives.rst:2605
msgid ""
"If the \"index\" role were the default for the application, it could be "
"dropped::"
msgstr ""

#: ../../source/dev/alternatives.rst:2610
msgid "Both of these would result in this XML::"
msgstr "Both of these would result in this XML::"

#: ../../source/dev/alternatives.rst:2618
msgid "from 2002-06-24 docutils-develop posts"
msgstr "from 2002-06-24 docutils-develop posts"

#: ../../source/dev/alternatives.rst:2620
msgid ""
"If all of your index entries will appear verbatim in the text, this "
"should be sufficient.  If not (e.g., if you want \"Van Rossum, Guido\" in"
" the index but \"Guido van Rossum\" in the text), we'll have to figure "
"out a supplemental mechanism, perhaps using substitutions."
msgstr ""

#: ../../source/dev/alternatives.rst:2626
msgid "I've thought a bit more on this, and I came up with two possibilities:"
msgstr "I've thought a bit more on this, and I came up with two possibilities:"

#: ../../source/dev/alternatives.rst:2628
msgid ""
"Using interpreted text, embed the index entry text within the interpreted"
" text::"
msgstr ""

#: ../../source/dev/alternatives.rst:2633
msgid ""
"The problem with this is obvious: the text becomes cluttered and hard to "
"read.  The processed output would drop the text in brackets, which goes "
"against the spirit of interpreted text."
msgstr ""

#: ../../source/dev/alternatives.rst:2637
msgid "Use substitutions::"
msgstr "Use substitutions::"

#: ../../source/dev/alternatives.rst:2643
msgid ""
"A problem with this is that each substitution definition must have a "
"unique name.  A subsequent ``.. |Guido van Rossum| index:: BDFL`` would "
"be illegal.  Some kind of anonymous substitution definition mechanism "
"would be required, but I think that's going too far."
msgstr ""

#: ../../source/dev/alternatives.rst:2648
msgid "Both of these alternatives are flawed.  Any other ideas?"
msgstr "Both of these alternatives are flawed.  Any other ideas?"

#: ../../source/dev/alternatives.rst:2653
msgid "... Or Not To Do?"
msgstr "... Or Not To Do?"

#: ../../source/dev/alternatives.rst:2655
msgid ""
"This is the realm of the possible but questionably probable.  These ideas"
" are kept here as a record of what has been proposed, for posterity and "
"in case any of them prove to be useful."
msgstr ""

#: ../../source/dev/alternatives.rst:2661
msgid "Compound Enumerated Lists"
msgstr "Compound Enumerated Lists"

#: ../../source/dev/alternatives.rst:2663
msgid ""
"Allow for compound enumerators, such as \"1.1.\" or \"1.a.\" or \"1(a)\","
" to allow for nested enumerated lists without indentation?"
msgstr ""

#: ../../source/dev/alternatives.rst:2668
msgid "Indented Lists"
msgstr "Indented Lists"

#: ../../source/dev/alternatives.rst:2670
msgid ""
"Allow for variant styles by interpreting indented lists as if they "
"weren't indented?  For example, currently the list below will be parsed "
"as a list within a block quote::"
msgstr ""

#: ../../source/dev/alternatives.rst:2679
msgid ""
"But a lot of people seem to write that way, and HTML browsers make it "
"look as if that's the way it should be.  The parser could check the "
"contents of block quotes, and if they contain only a single list, remove "
"the block quote wrapper.  There would be two problems:"
msgstr ""

#: ../../source/dev/alternatives.rst:2684
msgid "What if we actually *do* want a list inside a block quote?"
msgstr "What if we actually *do* want a list inside a block quote?"

#: ../../source/dev/alternatives.rst:2686
msgid ""
"What if such a list comes immediately after an indented construct, such "
"as a literal block?"
msgstr ""

#: ../../source/dev/alternatives.rst:2689
msgid ""
"Both could be solved using empty comments (problem 2 already exists for a"
" block quote after a literal block).  But that's a hack."
msgstr ""

#: ../../source/dev/alternatives.rst:2692
msgid ""
"Perhaps a runtime setting, allowing or disabling this convenience, would "
"be appropriate.  But that raises issues too:"
msgstr ""

#: ../../source/dev/alternatives.rst:2695
msgid ""
"User A, who writes lists indented (and their config file is set up to "
"allow it), sends a file to user B, who doesn't (and their config file "
"disables indented lists).  The result of processing by the two users will"
" be different."
msgstr ""

#: ../../source/dev/alternatives.rst:2700
msgid "It may seem minor, but it adds ambiguity to the parser, which is bad."
msgstr "It may seem minor, but it adds ambiguity to the parser, which is bad."

#: ../../source/dev/alternatives.rst:2702
msgid ""
"See the `Doc-SIG discussion starting 2001-04-18`__ with Ed Loper's "
"\"Structuring: a summary; and an attempt at EBNF\", item 4 (and follow-"
"ups, here__ and here__).  Also `docutils-users, 2003-02-17`__ and "
"`beginning 2003-08-04`__."
msgstr ""

#: ../../source/dev/alternatives.rst:2715
msgid "Sloppy Indentation of List Items"
msgstr "Sloppy Indentation of List Items"

#: ../../source/dev/alternatives.rst:2717
msgid ""
"Perhaps the indentation shouldn't be so strict.  Currently, this is "
"required::"
msgstr ""

#: ../../source/dev/alternatives.rst:2723
msgid "Anything wrong with this? ::"
msgstr "Anything wrong with this? ::"

#: ../../source/dev/alternatives.rst:2728
msgid "Problem? ::"
msgstr "Problem? ::"

#: ../../source/dev/alternatives.rst:2743
msgid "Hmm...  Non-strict indentation isn't such a good idea."
msgstr "Hmm...  Non-strict indentation isn't such a good idea."

#: ../../source/dev/alternatives.rst:2747
msgid "Lazy Indentation of List Items"
msgstr "Lazy Indentation of List Items"

#: ../../source/dev/alternatives.rst:2749
msgid ""
"Another approach: Going back to the first draft of reStructuredText "
"(2000-11-27 post to Doc-SIG)::"
msgstr ""

#: ../../source/dev/alternatives.rst:2756
msgid ""
"Change that to *require* a blank line above and below, to reduce "
"ambiguity.  This \"loosening\" may be added later, once the parser's been"
" nailed down.  However, a serious drawback of this approach is to limit "
"the content of each list item to a single paragraph."
msgstr ""

#: ../../source/dev/alternatives.rst:2763
msgid "David's Idea for Lazy Indentation"
msgstr "David's Idea for Lazy Indentation"

#: ../../source/dev/alternatives.rst:2765
msgid ""
"Consider a paragraph in a word processor.  It is a single logical line of"
" text which ends with a newline, soft-wrapped arbitrarily at the right "
"edge of the page or screen.  We can think of a plaintext paragraph in the"
" same way, as a single logical line of text, ending with two newlines (a "
"blank line) instead of one, and which may contain arbitrary line breaks "
"(newlines) where it was accidentally hard-wrapped by an application.  We "
"can compensate for the accidental hard-wrapping by \"unwrapping\" every "
"unindented second and subsequent line.  The indentation of the first line"
" of a paragraph or list item would determine the indentation for the "
"entire element.  Blank lines would be required between list items when "
"using lazy indentation."
msgstr ""

#: ../../source/dev/alternatives.rst:2777
msgid ""
"The following example shows the lazy indentation of multiple body "
"elements::"
msgstr ""

#: ../../source/dev/alternatives.rst:2792
msgid "A more complex example shows the limitations of lazy indentation::"
msgstr "A more complex example shows the limitations of lazy indentation::"

#: ../../source/dev/alternatives.rst:2819
msgid "And the ambiguity remains::"
msgstr "And the ambiguity remains::"

#: ../../source/dev/alternatives.rst:2831
msgid ""
"Literal blocks and block quotes would still require consistent "
"indentation for all their lines.  For block quotes, we might be able to "
"get away with only requiring that the first line of each contained "
"element be indented.  For example::"
msgstr ""

#: ../../source/dev/alternatives.rst:2847
msgid ""
"Although feasible, this form of lazy indentation has problems.  The "
"document structure and hierarchy is not obvious from the indentation, "
"making the source plaintext difficult to read.  This will also make "
"keeping track of the indentation while writing difficult and error-prone."
"  However, these problems may be acceptable for Wikis and email mode, "
"where we may be able to rely on less complex structure (few nested lists,"
" for example)."
msgstr ""

#: ../../source/dev/alternatives.rst:2857
msgid "Multiple Roles in Interpreted Text"
msgstr "Multiple Roles in Interpreted Text"

#: ../../source/dev/alternatives.rst:2859
msgid ""
"In reStructuredText, inline markup cannot be nested (yet; `see above`__)."
"  This also applies to interpreted text.  In order to simultaneously "
"combine multiple roles for a single piece of text, a syntax extension "
"would be necessary.  Ideas:"
msgstr ""

#: ../../source/dev/alternatives.rst:2864
msgid "Initial idea::"
msgstr "Initial idea::"

#: ../../source/dev/alternatives.rst:2868
msgid "Suggested by Jason Diamond::"
msgstr "Suggested by Jason Diamond::"

#: ../../source/dev/alternatives.rst:2872
msgid ""
"If a document is so complex as to require nested inline markup, perhaps "
"another markup system should be considered.  By design, reStructuredText "
"does not have the flexibility of XML."
msgstr ""

#: ../../source/dev/alternatives.rst:2880
msgid "Parameterized Interpreted Text"
msgstr "Parameterized Interpreted Text"

#: ../../source/dev/alternatives.rst:2882
msgid ""
"In some cases it may be expedient to pass parameters to interpreted text,"
" analogous to function calls.  Ideas:"
msgstr ""

#: ../../source/dev/alternatives.rst:2885
msgid ""
"Parameterize the interpreted text role itself (suggested by Jason "
"Diamond)::"
msgstr ""

#: ../../source/dev/alternatives.rst:2890
msgid "Positional parameters could also be supported::"
msgstr "Positional parameters could also be supported::"

#: ../../source/dev/alternatives.rst:2895
msgid ""
"Technical problem: current interpreted text syntax does not recognize "
"roles containing whitespace.  Design problem: this smells like "
"programming language syntax, but reStructuredText is not a programming "
"language."
msgstr ""

#: ../../source/dev/alternatives.rst:2900
msgid "Put the parameters inside the interpreted text::"
msgstr "Put the parameters inside the interpreted text::"

#: ../../source/dev/alternatives.rst:2905
msgid ""
"Although this could be defined on an individual basis (per role), we "
"ought to have a standard.  Hyperlinks with embedded URIs already use "
"angle brackets; perhaps they could be used here too::"
msgstr ""

#: ../../source/dev/alternatives.rst:2912
msgid ""
"Do angle brackets connote URLs too much for this to be acceptable? How "
"about the \"tag\" connotation -- does it save them or doom them?"
msgstr ""

#: ../../source/dev/alternatives.rst:2915
msgid "`Nested inline markup`_ could prove useful here::"
msgstr "`Nested inline markup`_ could prove useful here::"

#: ../../source/dev/alternatives.rst:2921
msgid ""
"Inline markup roles could even define the default roles of nested inline "
"markup, allowing this cleaner syntax::"
msgstr ""

#: ../../source/dev/alternatives.rst:2927
msgid ""
"Does this push inline markup too far?  Readability becomes a serious "
"issue.  Substitutions may provide a better alternative (at the expense of"
" verbosity and duplication) by pulling the details out of the text flow::"
msgstr ""

#: ../../source/dev/alternatives.rst:2940
msgid ""
"This whole idea may be going beyond the scope of reStructuredText. "
"Documents requiring this functionality may be better off using XML or "
"another markup system."
msgstr ""

#: ../../source/dev/alternatives.rst:2944
msgid ""
"This argument comes up regularly when pushing the envelope of "
"reStructuredText syntax.  I think it's a useful argument in that it "
"provides a check on creeping featurism.  In many cases, the resulting "
"verbosity produces such unreadable plaintext that there's a natural "
"desire *not* to use it unless absolutely necessary.  It's a matter of "
"finding the right balance."
msgstr ""

#: ../../source/dev/alternatives.rst:2953
msgid "Syntax for Interpreted Text Role Bindings"
msgstr "Syntax for Interpreted Text Role Bindings"

#: ../../source/dev/alternatives.rst:2955
msgid "The following syntax (idea from Jeffrey C. Jacobs) could be used"
msgstr "The following syntax (idea from Jeffrey C. Jacobs) could be used"

