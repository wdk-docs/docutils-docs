# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, Nosy
# This file is distributed under the same license as the docutils-docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: docutils-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-13 09:36+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/dev/problems.rst:3
msgid "Problems With StructuredText"
msgstr ""

#: ../../source/dev/problems.rst
msgid "Author"
msgstr ""

#: ../../source/dev/problems.rst:4
msgid "David Goodger"
msgstr ""

#: ../../source/dev/problems.rst
msgid "Contact"
msgstr ""

#: ../../source/dev/problems.rst:5
msgid "docutils-develop@lists.sourceforge.net"
msgstr ""

#: ../../source/dev/problems.rst
msgid "Revision"
msgstr ""

#: ../../source/dev/problems.rst:6
msgid "$Revision: 7302 $"
msgstr ""

#: ../../source/dev/problems.rst
msgid "Date"
msgstr ""

#: ../../source/dev/problems.rst:7
msgid "$Date: 2012-01-03 20:23:53 +0100 (Di, 03. J盲n 2012) $"
msgstr ""

#: ../../source/dev/problems.rst
msgid "Copyright"
msgstr ""

#: ../../source/dev/problems.rst:8
msgid "This document has been placed in the public domain."
msgstr ""

#: ../../source/dev/problems.rst:10
msgid ""
"There are several problems, unresolved issues, and areas of controversy "
"within StructuredText_ (Classic and Next Generation).  In order to "
"resolve all these issues, this analysis brings all of the issues out into"
" the open, enumerates all the alternatives, and proposes solutions to be "
"incorporated into the reStructuredText_ specification."
msgstr ""

#: ../../source/dev/problems.rst:19
msgid "目录"
msgstr ""

#: ../../source/dev/problems.rst:22
msgid "Formal Specification"
msgstr ""

#: ../../source/dev/problems.rst:24
msgid ""
"The description in the original StructuredText.py has been criticized for"
" being vague.  For practical purposes, \"the code *is* the spec.\" Tony "
"Ibbs has been working on deducing a `detailed description`_ from the "
"documentation and code of StructuredTextNG_.  Edward Loper's STMinus_ is "
"another attempt to formalize a spec."
msgstr ""

#: ../../source/dev/problems.rst:30
msgid ""
"For this kind of a project, the specification should always precede the "
"code.  Otherwise, the markup is a moving target which can never be "
"adopted as a standard.  Of course, a specification may be revised during "
"lifetime of the code, but without a spec there is no visible control and "
"thus no confidence."
msgstr ""

#: ../../source/dev/problems.rst:38
msgid "Understanding and Extending the Code"
msgstr ""

#: ../../source/dev/problems.rst:40
msgid ""
"The original StructuredText_ is a dense mass of sparsely commented code "
"and inscrutable regular expressions.  It was not designed to be extended "
"and is very difficult to understand.  StructuredTextNG_ has been designed"
" to allow input (syntax) and output extensions, but its documentation "
"(both internal [comments & docstrings], and external) is inadequate for "
"the complexity of the code itself."
msgstr ""

#: ../../source/dev/problems.rst:47
msgid ""
"For reStructuredText to become truly useful, perhaps even part of "
"Python's standard library, it must have clear, understandable "
"documentation and implementation code.  For the implementation of "
"reStructuredText to be taken seriously, it must be a sterling example of "
"the potential of docstrings; the implementation must practice what the "
"specification preaches."
msgstr ""

#: ../../source/dev/problems.rst:56
msgid "Section Structure via Indentation"
msgstr ""

#: ../../source/dev/problems.rst:58
msgid ""
"Setext_ required that body text be indented by 2 spaces.  The original "
"StructuredText_ and StructuredTextNG_ require that section structure be "
"indicated through indentation, as \"inspired by Python\".  For certain "
"structures with a very limited, local extent (such as lists, block "
"quotes, and literal blocks), indentation naturally indicates structure or"
" hierarchy.  For sections (which may have a very large extent), structure"
" via indentation is unnecessary, unnatural and ambiguous.  Rather, the "
"syntax of the section title *itself* should indicate that it is a section"
" title."
msgstr ""

#: ../../source/dev/problems.rst:68
msgid ""
"The original StructuredText states that \"A single-line paragraph whose "
"immediately succeeding paragraphs are lower level is treated as a "
"header.\" Requiring indentation in this way is:"
msgstr ""

#: ../../source/dev/problems.rst:72
msgid ""
"Unnecessary.  The vast majority of docstrings and standalone documents "
"will have no more than one level of section structure. Requiring "
"indentation for such docstrings is unnecessary and irritating."
msgstr ""

#: ../../source/dev/problems.rst:77
msgid ""
"Unnatural.  Most published works use title style (type size, face, "
"weight, and position) and/or section/subsection numbering rather than "
"indentation to indicate hierarchy.  This is a tradition with a very long "
"history."
msgstr ""

#: ../../source/dev/problems.rst:82
msgid ""
"Ambiguous.  A StructuredText header is indistinguishable from a one-line "
"paragraph followed by a block quote (precluding the use of block quotes)."
"  Enumerated section titles are ambiguous (is it a header? is it a list "
"item?).  Some additional adornment must be required to confirm the line's"
" role as a title, both to a parser and to the human reader of the source "
"text."
msgstr ""

#: ../../source/dev/problems.rst:89
msgid ""
"Python's use of significant whitespace is a wonderful (if not original) "
"innovation, however requiring indentation in ordinary written text is "
"hypergeneralization."
msgstr ""

#: ../../source/dev/problems.rst:93
msgid ""
"reStructuredText_ indicates section structure through title adornment "
"style (as exemplified by this document).  This is far more natural. In "
"fact, it is already in widespread use in plain text documents, including "
"in Python's standard distribution (such as the toplevel README_ file)."
msgstr ""

#: ../../source/dev/problems.rst:101
msgid "Character Escaping Mechanism"
msgstr ""

#: ../../source/dev/problems.rst:103
msgid ""
"No matter what characters are chosen for markup, some day someone will "
"want to write documentation *about* that markup or using markup "
"characters in a non-markup context.  Therefore, any complete markup "
"language must have an escaping or encoding mechanism.  For a lightweight "
"markup system, encoding mechanisms like SGML/XML's '&ast;' are out.  So "
"an escaping mechanism is in.  However, with carefully chosen markup, it "
"should be necessary to use the escaping mechanism only infrequently."
msgstr ""

#: ../../source/dev/problems.rst:112
msgid ""
"reStructuredText_ needs an escaping mechanism: a way to treat markup-"
"significant characters as the characters themselves.  Currently there is "
"no such mechanism (although ZWiki uses '!').  What are the candidates?"
msgstr ""

#: ../../source/dev/problems.rst:117
msgid ""
"``!`` "
"(http://www.zope.org/DevHome/Members/jim/StructuredTextWiki/NGEscaping)"
msgstr ""

#: ../../source/dev/problems.rst:119
msgid "``\\``"
msgstr ""

#: ../../source/dev/problems.rst:120
msgid "``~``"
msgstr ""

#: ../../source/dev/problems.rst:121
msgid "doubling of characters"
msgstr ""

#: ../../source/dev/problems.rst:123
msgid ""
"The best choice for this is the backslash (``\\``).  It's \"the single "
"most popular escaping character in the world!\", therefore familiar and "
"unsurprising.  Since characters only need to be escaped under special "
"circumstances, which are typically those explaining technical programming"
" issues, the use of the backslash is natural and understandable.  Python "
"docstrings can be raw (prefixed with an 'r', as in 'r\"\"'), which would "
"obviate the need for gratuitous doubling-up of backslashes."
msgstr ""

#: ../../source/dev/problems.rst:132
msgid ""
"(On 2001-03-29 on the Doc-SIG mailing list, GvR endorsed backslash "
"escapes, saying, \"'nuff said.  Backslash it is.\" Although neither "
"legally binding nor irrevocable nor any kind of guarantee of anything, it"
" is a good sign.)"
msgstr ""

#: ../../source/dev/problems.rst:137
msgid ""
"The rule would be: An unescaped backslash followed by any markup "
"character escapes the character.  The escaped character represents the "
"character itself, and is prevented from playing a role in any markup "
"interpretation.  The backslash is removed from the output.  A literal "
"backslash is represented by an \"escaped backslash,\" two backslashes in "
"a row."
msgstr ""

#: ../../source/dev/problems.rst:144
msgid ""
"A carefully constructed set of recognition rules for inline markup will "
"obviate the need for backslash-escapes in almost all cases; see "
"`Delimitation of Inline Markup`_ below."
msgstr ""

#: ../../source/dev/problems.rst:148
msgid ""
"When an expression (requiring backslashes and other characters used for "
"markup) becomes too complicated and therefore unreadable, a literal block"
" may be used instead.  Inside literal blocks, no markup is recognized, "
"therefore backslashes (for the purpose of escaping markup) become "
"unnecessary."
msgstr ""

#: ../../source/dev/problems.rst:154
msgid ""
"We could allow backslashes preceding non-markup characters to remain in "
"the output.  This would make describing regular expressions and other "
"uses of backslashes easier.  However, this would complicate the markup "
"rules and would be confusing."
msgstr ""

#: ../../source/dev/problems.rst:161
msgid "Blank Lines in Lists"
msgstr ""

#: ../../source/dev/problems.rst:163
msgid ""
"Oft-requested in Doc-SIG (the earliest reference is dated 1996-08-13) is "
"the ability to write lists without requiring blank lines between items.  "
"In docstrings, space is at a premium.  Authors want to convey their API "
"or usage information in as compact a form as possible. StructuredText_ "
"requires blank lines between all body elements, including list items, "
"even when boundaries are obvious from the markup itself."
msgstr ""

#: ../../source/dev/problems.rst:171
msgid ""
"In reStructuredText, blank lines are optional between list items. "
"However, in order to eliminate ambiguity, a blank line is required before"
" the first list item and after the last.  Nested lists also require blank"
" lines before the list start and after the list end."
msgstr ""

#: ../../source/dev/problems.rst:178
msgid "Bullet List Markup"
msgstr ""

#: ../../source/dev/problems.rst:180
msgid ""
"StructuredText_ includes 'o' as a bullet character.  This is dangerous "
"and counter to the language-independent nature of the markup.  There are "
"many languages in which 'o' is a word.  For example, in Spanish::"
msgstr ""

#: ../../source/dev/problems.rst:189
msgid "And in Japanese (when romanized)::"
msgstr ""

#: ../../source/dev/problems.rst:196
msgid ""
"If a paragraph containing an 'o' word wraps such that the 'o' is the "
"first text on a line, or if a paragraph begins with such a word, it could"
" be misinterpreted as a bullet list."
msgstr ""

#: ../../source/dev/problems.rst:200
msgid ""
"In reStructuredText_, 'o' is not used as a bullet character.  '-', '*', "
"and '+' are the possible bullet characters."
msgstr ""

#: ../../source/dev/problems.rst:205
msgid "Enumerated List Markup"
msgstr ""

#: ../../source/dev/problems.rst:207
msgid ""
"StructuredText enumerated lists are allowed to begin with numbers and "
"letters followed by a period or right-parenthesis, then whitespace. This "
"has surprising consequences for writing styles.  For example, this is "
"recognized as an enumerated list item by StructuredText::"
msgstr ""

#: ../../source/dev/problems.rst:214
msgid ""
"People will write enumerated lists in all different ways.  It is folly to"
" try to come up with the \"perfect\" format for an enumerated list, and "
"limit the docstring parser's recognition to that one format only."
msgstr ""

#: ../../source/dev/problems.rst:218
msgid ""
"Rather, the parser should recognize a variety of enumerator styles. It is"
" also recommended that the enumerator of the first list item be ordinal-1"
" ('1', 'A', 'a', 'I', or 'i'), as output formats may not be able to begin"
" a list at an arbitrary enumeration."
msgstr ""

#: ../../source/dev/problems.rst:223
msgid ""
"An initial idea was to require two or more consistent enumerated list "
"items in a row.  This idea proved impractical and was dropped.  In "
"practice, the presence of a proper enumerator is enough to reliably "
"recognize an enumerated list item; any ambiguities are reported by the "
"parser.  Here's the original idea for posterity:"
msgstr ""

#: ../../source/dev/problems.rst:229
msgid ""
"The parser should recognize a variety of enumerator styles, mark each "
"block as a potential enumerated list item (PELI), and interpret the "
"enumerators of adjacent PELIs to decide whether they make up a consistent"
" enumerated list."
msgstr ""

#: ../../source/dev/problems.rst:234
msgid ""
"If a PELI is labeled with a \"1.\", and is immediately followed by a PELI"
" labeled with a \"2.\", we've got an enumerated list.  Or \"(A)\" "
"followed by \"(B)\".  Or \"i)\" followed by \"ii)\", etc.  The chances of"
" accidentally recognizing two adjacent and consistently labeled PELIs, "
"are acceptably small."
msgstr ""

#: ../../source/dev/problems.rst:240
msgid "For an enumerated list to be recognized, the following must be true:"
msgstr ""

#: ../../source/dev/problems.rst:243
msgid "the list must consist of multiple adjacent list items (2 or more)"
msgstr ""

#: ../../source/dev/problems.rst:245
msgid "the enumerators must all have the same format"
msgstr ""

#: ../../source/dev/problems.rst:246
msgid "the enumerators must be sequential"
msgstr ""

#: ../../source/dev/problems.rst:250
msgid "Definition List Markup"
msgstr ""

#: ../../source/dev/problems.rst:252
msgid ""
"StructuredText uses ' -- ' (whitespace, two hyphens, whitespace) on the "
"first line of a paragraph to indicate a definition list item.  The ' -- '"
" serves to separate the term (on the left) from the definition (on the "
"right)."
msgstr ""

#: ../../source/dev/problems.rst:257
msgid ""
"Many people use ' -- ' as an em-dash in their text, conflicting with the "
"StructuredText usage.  Although the Chicago Manual of Style says that "
"spaces should not be used around an em-dash, Peter Funk pointed out that "
"this is standard usage in German (according to the Duden, the official "
"German reference), and possibly in other languages as well. The "
"widespread use of ' -- ' precludes its use for definition lists; it would"
" violate the \"unsurprising\" criterion."
msgstr ""

#: ../../source/dev/problems.rst:265
msgid ""
"A simpler, and at least equally visually distinctive construct (proposed "
"by Guido van Rossum, who incidentally is a frequent user of ' -- ') would"
" do just as well::"
msgstr ""

#: ../../source/dev/problems.rst:277
msgid ""
"A reStructuredText definition list item consists of a term and a "
"definition.  A term is a simple one-line paragraph.  A definition is a "
"block indented relative to the term, and may contain multiple paragraphs "
"and other body elements.  No blank line precedes a definition (this "
"distinguishes definition lists from block quotes)."
msgstr ""

#: ../../source/dev/problems.rst:285
msgid "Literal Blocks"
msgstr ""

#: ../../source/dev/problems.rst:287
msgid ""
"The StructuredText_ specification has literal blocks indicated by "
"'example', 'examples', or '::' ending the preceding paragraph.  STNG only"
" recognizes '::'; 'example'/'examples' are not implemented.  This is "
"good; it fixes an unnecessary language dependency.  The problem is what "
"to do with the sometimes- unwanted '::'."
msgstr ""

#: ../../source/dev/problems.rst:293
msgid ""
"In reStructuredText_ '::' at the end of a paragraph indicates that "
"subsequent *indented* blocks are treated as literal text.  No further "
"markup interpretation is done within literal blocks (not even backslash-"
"escapes).  If the '::' is preceded by whitespace, '::' is omitted from "
"the output; if '::' was the sole content of a paragraph, the entire "
"paragraph is removed (no 'empty' paragraph remains).  If '::' is preceded"
" by a non-whitespace character, '::' is replaced by ':' (i.e., the extra "
"colon is removed)."
msgstr ""

#: ../../source/dev/problems.rst:302
msgid "Thus, a section could begin with a literal block as follows::"
msgstr ""

#: ../../source/dev/problems.rst:313
msgid "Tables"
msgstr ""

#: ../../source/dev/problems.rst:315
msgid ""
"The table markup scheme in classic StructuredText was horrible.  Its "
"omission from StructuredTextNG is welcome, and its markup will not be "
"repeated here.  However, tables themselves are useful in documentation.  "
"Alternatives:"
msgstr ""

#: ../../source/dev/problems.rst:320
msgid ""
"This format is the most natural and obvious.  It was independently "
"invented (no great feat of creation!), and later found to be the format "
"supported by the `Emacs table mode`_::"
msgstr ""

#: ../../source/dev/problems.rst:334
msgid ""
"Tables are described with a visual outline made up of the characters '-',"
" '=', '|', and '+':"
msgstr ""

#: ../../source/dev/problems.rst:337
msgid "The hyphen ('-') is used for horizontal lines (row separators)."
msgstr ""

#: ../../source/dev/problems.rst:338
msgid ""
"The equals sign ('=') is optionally used as a header separator (as of "
"version 1.5.24, this is not supported by the Emacs table mode)."
msgstr ""

#: ../../source/dev/problems.rst:341
msgid "The vertical bar ('|') is used for for vertical lines (column separators)."
msgstr ""

#: ../../source/dev/problems.rst:343
msgid ""
"The plus sign ('+') is used for intersections of horizontal and vertical "
"lines."
msgstr ""

#: ../../source/dev/problems.rst:346
msgid ""
"Row and column spans are possible simply by omitting the column or row "
"separators, respectively.  The header row separator must be complete; in "
"other words, a header cell may not span into the table body.  Each cell "
"contains body elements, and may have multiple paragraphs, lists, etc.  "
"Initial spaces for a left margin are allowed; the first line of text in a"
" cell determines its left margin."
msgstr ""

#: ../../source/dev/problems.rst:354
msgid ""
"Below is a simpler table structure.  It may be better suited to manual "
"input than alternative #1, but there is no Emacs editing mode available."
"  One disadvantage is that it resembles section titles; a one-column "
"table would look exactly like section & subsection titles. ::"
msgstr ""

#: ../../source/dev/problems.rst:370
msgid ""
"The table begins with a top border of equals signs with a space at each "
"column boundary (regardless of spans).  Each row is underlined.  Internal"
" row separators are underlines of '-', with spaces at column boundaries."
"  The last of the optional head rows is underlined with '=', again with "
"spaces at column boundaries. Column spans have no spaces in their "
"underline.  Row spans simply lack an underline at the row boundary.  The "
"bottom boundary of the table consists of '=' underlines.  A blank line is"
" required following a table."
msgstr ""

#: ../../source/dev/problems.rst:380
msgid "A minimalist alternative is as follows::"
msgstr ""

#: ../../source/dev/problems.rst:399
msgid ""
"The table begins with a top border of equals signs with one or more "
"spaces at each column boundary (regardless of spans).  There must be at "
"least two columns in the table (to differentiate it from section "
"headers).  Each line starts a new row.  The rightmost column is "
"unbounded; text may continue past the edge of the table. Each row/line "
"must contain spaces at column boundaries, except for explicit column "
"spans.  Underlines of '-' can be used to indicate column spans, but "
"should be used sparingly if at all.  Lines containing column span "
"underlines may not contain any other text. The last of the optional head "
"rows is underlined with '=', again with spaces at column boundaries.  The"
" bottom boundary of the table consists of '=' underlines.  A blank line "
"is required following a table."
msgstr ""

#: ../../source/dev/problems.rst:413
msgid ""
"This table sums up the features.  Using all the features in such a small "
"space is not pretty though::"
msgstr ""

#: ../../source/dev/problems.rst:430
msgid ""
"As a variation of alternative 3, bullet list syntax in the first column "
"could be used to indicate row starts.  Multi-line rows are possible, but "
"row spans are not.  For example::"
msgstr ""

#: ../../source/dev/problems.rst:446
msgid ""
"Column spans would be indicated on the line after the last line of the "
"row.  To indicate a real bullet list within a first-column cell, simply "
"nest the bullets."
msgstr ""

#: ../../source/dev/problems.rst:450
msgid ""
"In a further variation, we could simply assume that whitespace in the "
"first column implies a multi-line row; the text in other columns is "
"continuation text.  For example::"
msgstr ""

#: ../../source/dev/problems.rst:466
msgid "Limitations of this approach:"
msgstr ""

#: ../../source/dev/problems.rst:468
msgid "Cells in the first column are limited to one line of text."
msgstr ""

#: ../../source/dev/problems.rst:470
msgid ""
"Cells in the first column *must* contain some text; blank cells would "
"lead to a misinterpretation.  An empty comment (\"..\") is sufficient."
msgstr ""

#: ../../source/dev/problems.rst:474
msgid ""
"Combining alternative 3 and 4, a bullet list in the first column could "
"mean multi-line rows, and no bullet list means single-line rows only."
msgstr ""

#: ../../source/dev/problems.rst:478
msgid "Alternatives 1 and 5 has been adopted by reStructuredText."
msgstr ""

#: ../../source/dev/problems.rst:482
msgid "Delimitation of Inline Markup"
msgstr ""

#: ../../source/dev/problems.rst:484
msgid ""
"StructuredText specifies that inline markup must begin with whitespace, "
"precluding such constructs as parenthesized or quoted emphatic text::"
msgstr ""

#: ../../source/dev/problems.rst:490
msgid ""
"The `reStructuredText markup specification`_ allows for such constructs "
"and disambiguates inline markup through a set of recognition rules.  "
"These recognition rules define the context of markup start-strings and "
"end-strings, allowing markup characters to be used in most non-markup "
"contexts without a problem (or a backslash). So we can say, \"Use "
"asterisks (*) around words or phrases to *emphasisze* them.\" The '(*)' "
"will not be recognized as markup.  This reduces the need for markup "
"escaping to the point where an escape character is *almost* (but not "
"quite!) unnecessary."
msgstr ""

#: ../../source/dev/problems.rst:502
msgid "Underlining"
msgstr ""

#: ../../source/dev/problems.rst:504
msgid ""
"StructuredText uses '_text_' to indicate underlining.  To quote David "
"Ascher in his 2000-01-21 Doc-SIG mailing list post, \"Docstring grammar: "
"a very revised proposal\":"
msgstr ""

#: ../../source/dev/problems.rst:508
msgid ""
"The tagging of underlined text with _'s is suboptimal.  Underlines "
"shouldn't be used from a typographic perspective (underlines were "
"designed to be used in manuscripts to communicate to the typesetter that "
"the text should be italicized -- no well-typeset book ever uses "
"underlines), and conflict with double-underscored Python variable names "
"(__init__ and the like), which would get truncated and underlined when "
"that effect is not desired.  Note that while *complete* markup would "
"prevent that truncation ('__init__'), I think of docstring markups much "
"like I think of type annotations -- they should be optional and above all"
" do no harm.  In this case the underline markup does harm."
msgstr ""

#: ../../source/dev/problems.rst:520
msgid "Underlining is not part of the reStructuredText specification."
msgstr ""

#: ../../source/dev/problems.rst:524
msgid "Inline Literals"
msgstr ""

#: ../../source/dev/problems.rst:526
msgid ""
"StructuredText's markup for inline literals (text left as-is, verbatim, "
"usually in a monospaced font; as in HTML <TT>) is single quotes "
"('literals').  The problem with single quotes is that they are too often "
"used for other purposes:"
msgstr ""

#: ../../source/dev/problems.rst:531
msgid "Apostrophes: \"Don't blame me, 'cause it ain't mine, it's Chris'.\";"
msgstr ""

#: ../../source/dev/problems.rst:533
msgid "Quoting text:"
msgstr ""

#: ../../source/dev/problems.rst:535
msgid ""
"First Bruce: \"Well Bruce, I heard the prime minister use it. 'S'hot "
"enough to boil a monkey's bum in 'ere your Majesty,' he said, and she "
"smiled quietly to herself.\""
msgstr ""

#: ../../source/dev/problems.rst:539
msgid "In the UK, single quotes are used for dialogue in published works."
msgstr ""

#: ../../source/dev/problems.rst:541
msgid "String literals: s = ''"
msgstr ""

#: ../../source/dev/problems.rst:543
msgid "Alternatives::"
msgstr ""

#: ../../source/dev/problems.rst:548
msgid ""
"The examples below contain inline literals, quoted text, and apostrophes."
"  Each example should evaluate to the following HTML::"
msgstr ""

#: ../../source/dev/problems.rst:581
msgid ""
"Backquotes (#9 & #12) are the best choice.  They are unobtrusive and "
"relatviely rarely used (more rarely than ' or \", anyhow).  Backquotes "
"have the connotation of 'quotes', which other options (like carets, #10) "
"don't."
msgstr ""

#: ../../source/dev/problems.rst:586
msgid ""
"Analogously with ``*emph*`` & ``**strong**``, double-backquotes (#12) "
"could be used for inline literals.  If single-backquotes are used for "
"'interpreted text' (context-sensitive domain-specific descriptive markup)"
" such as function name hyperlinks in Python docstrings, then double-"
"backquotes could be used for absolute-literals, wherein no processing "
"whatsoever takes place.  An advantage of double-backquotes would be that "
"backslash-escaping would no longer be necessary for embedded single-"
"backquotes; however, embedded double-backquotes (in an end-string "
"context) would be illegal.  See `Backquotes in Phrase-Links`__ in `Record"
" of reStructuredText Syntax Alternatives`__."
msgstr ""

#: ../../source/dev/problems.rst:600
msgid ""
"Alternative choices are carets (#10) and TeX-style quotes (#11).  For "
"examples of TeX-style quoting, see "
"http://www.zope.org/Members/jim/StructuredTextWiki/CustomizingTheDocumentProcessor."
msgstr ""

#: ../../source/dev/problems.rst:604
msgid "Some existing uses of backquotes:"
msgstr ""

#: ../../source/dev/problems.rst:606
msgid "As a synonym for repr() in Python."
msgstr ""

#: ../../source/dev/problems.rst:607
msgid "For command-interpolation in shell scripts."
msgstr ""

#: ../../source/dev/problems.rst:608
msgid ""
"Used as open-quotes in TeX code (and carried over into plaintext by "
"TeXies)."
msgstr ""

#: ../../source/dev/problems.rst:611
msgid ""
"The inline markup start-string and end-string recognition rules defined "
"by the `reStructuredText markup specification`_ would allow all of these "
"cases inside inline literals, with very few exceptions. As a fallback, "
"literal blocks could handle all cases."
msgstr ""

#: ../../source/dev/problems.rst:616
msgid ""
"Outside of inline literals, the above uses of backquotes would require "
"backslash-escaping.  However, these are all prime examples of text that "
"should be marked up with inline literals."
msgstr ""

#: ../../source/dev/problems.rst:620
msgid ""
"If either backquotes or straight single-quotes are used as markup, TeX-"
"quotes are too troublesome to support, so no special-casing of TeX-quotes"
" should be done (at least at first).  If TeX-quotes have to be used "
"outside of literals, a single backslash-escaped would suffice: \\``TeX "
"quote''.  Ugly, true, but very infrequently used."
msgstr ""

#: ../../source/dev/problems.rst:626
msgid ""
"Using literal blocks is a fallback option which removes the need for "
"backslash-escaping::"
msgstr ""

#: ../../source/dev/problems.rst:633
msgid ""
"No mechanism for inline literals is perfect, just as no escaping "
"mechanism is perfect.  No matter what we use, complicated inline "
"expressions involving the inline literal quote and/or the backslash will "
"end up looking ugly.  We can only choose the least often ugly option."
msgstr ""

#: ../../source/dev/problems.rst:639
msgid ""
"reStructuredText will use double backquotes for inline literals, and "
"single backqoutes for interpreted text."
msgstr ""

#: ../../source/dev/problems.rst:644
msgid "Hyperlinks"
msgstr ""

#: ../../source/dev/problems.rst:646
msgid "There are three forms of hyperlink currently in StructuredText_:"
msgstr ""

#: ../../source/dev/problems.rst:648
msgid ""
"(Absolute & relative URIs.)  Text enclosed by double quotes followed by a"
" colon, a URI, and concluded by punctuation plus white space, or just "
"white space, is treated as a hyperlink::"
msgstr ""

#: ../../source/dev/problems.rst:654
msgid ""
"(Absolute URIs only.)  Text enclosed by double quotes followed by a "
"comma, one or more spaces, an absolute URI and concluded by punctuation "
"plus white space, or just white space, is treated as a hyperlink::"
msgstr ""

#: ../../source/dev/problems.rst:661
msgid ""
"(Endnotes.)  Text enclosed by brackets link to an endnote at the end of "
"the document: at the beginning of the line, two dots, a space, and the "
"same text in brackets, followed by the end note itself::"
msgstr ""

#: ../../source/dev/problems.rst:671
msgid ""
"The problem with forms 1 and 2 is that they are neither intuitive nor "
"unobtrusive (they break design goals 5 & 2).  They overload double-"
"quotes, which are too often used in ordinary text (potentially breaking "
"design goal 4).  The brackets in form 3 are also too common in ordinary "
"text (such as [nested] asides and Python lists like [12])."
msgstr ""

#: ../../source/dev/problems.rst:677
msgid "Alternatives:"
msgstr ""

#: ../../source/dev/problems.rst:679
msgid "Have no special markup for hyperlinks."
msgstr ""

#: ../../source/dev/problems.rst:681
msgid ""
"Interpret and mark up hyperlinks as any contiguous text containing '://' "
"or ':...@' (absolute URI) or '@' (email address) after an alphanumeric "
"word.  To de-emphasize the URI, simply enclose it in parentheses:"
msgstr ""

#: ../../source/dev/problems.rst:686
msgid "Python (http://www.python.org/)"
msgstr ""

#: ../../source/dev/problems.rst:688
msgid ""
"Leave special hyperlink markup as a domain-specific extension. Hyperlinks"
" in ordinary reStructuredText documents would be required to be "
"standalone (i.e. the URI text inline in the document text).  Processed "
"hyperlinks (where the URI text is hidden behind the link) are important "
"enough to warrant syntax."
msgstr ""

#: ../../source/dev/problems.rst:694
msgid ""
"The original Setext_ introduced a mechanism of indirect hyperlinks. A "
"source link word ('hot word') in the text was given a trailing "
"underscore::"
msgstr ""

#: ../../source/dev/problems.rst:700
msgid ""
"The hyperlink itself appeared at the end of the document on a line by "
"itself, beginning with two dots, a space, the link word with a leading "
"underscore, whitespace, and the URI itself::"
msgstr ""

#: ../../source/dev/problems.rst:706
msgid "Setext used ``underscores_instead_of_spaces_`` for phrase links."
msgstr ""

#: ../../source/dev/problems.rst:708
msgid ""
"With some modification, alternative 3 best satisfies the design goals. It"
" has the advantage of being readable and relatively unobtrusive. Since "
"each source link must match up to a target, the odd variable ending in an"
" underscore can be spared being marked up (although it should generate a "
"\"no such link target\" warning).  The only disadvantage is that phrase-"
"links aren't possible without some obtrusive syntax."
msgstr ""

#: ../../source/dev/problems.rst:716
msgid "We could achieve phrase-links if we enclose the link text:"
msgstr ""

#: ../../source/dev/problems.rst:718
msgid "in double quotes::"
msgstr ""

#: ../../source/dev/problems.rst:722
msgid "in brackets::"
msgstr ""

#: ../../source/dev/problems.rst:726
msgid "or in backquotes::"
msgstr ""

#: ../../source/dev/problems.rst:730
msgid ""
"Each gives us somewhat obtrusive markup, but that is unavoidable.  The "
"bracketed syntax (#2) is reminiscent of links on many web pages "
"(intuitive), although it is somewhat obtrusive.  Alternative #3 is much "
"less obtrusive, and is consistent with interpreted text: the trailing "
"underscore indicates the interpretation of the phrase, as a hyperlink.  "
"#3 also disambiguates hyperlinks from footnote references. Alternative #3"
" wins."
msgstr ""

#: ../../source/dev/problems.rst:738
msgid ""
"The same trailing underscore markup can also be used for footnote and "
"citation references, removing the problem with ordinary bracketed text "
"and Python lists::"
msgstr ""

#: ../../source/dev/problems.rst:747
msgid ""
"The two-dots-and-a-space syntax was generalized by Setext for comments, "
"which are removed from the (visible) processed output. reStructuredText "
"uses this syntax for comments, footnotes, and link target, collectively "
"termed \"explicit markup\".  For link targets, in order to eliminate "
"ambiguity with comments and footnotes, reStructuredText specifies that a "
"colon always follow the link target word/phrase.  The colon denotes 'maps"
" to'.  There is no reason to restrict target links to the end of the "
"document; they could just as easily be interspersed."
msgstr ""

#: ../../source/dev/problems.rst:757
msgid ""
"Internal hyperlinks (links from one point to another within a single "
"document) can be expressed by a source link as before, and a target link "
"with a colon but no URI.  In effect, these targets 'map to' the element "
"immediately following."
msgstr ""

#: ../../source/dev/problems.rst:762
msgid ""
"As an added bonus, we now have a perfect candidate for reStructuredText "
"directives, a simple extension mechanism: explicit markup containing a "
"single word followed by two colons and whitespace. The interpretation of "
"subsequent data on the directive line or following is directive-"
"dependent."
msgstr ""

#: ../../source/dev/problems.rst:768
msgid "To summarize::"
msgstr ""

#: ../../source/dev/problems.rst:790
msgid ""
"The presence or absence of a colon after the target link differentiates "
"an indirect hyperlink from a footnote, respectively.  A footnote requires"
" brackets.  Backquotes around a target link word or phrase are required "
"if the phrase contains a colon, optional otherwise."
msgstr ""

#: ../../source/dev/problems.rst:796
msgid ""
"Below are examples using no markup, the two StructuredText hypertext "
"styles, and the reStructuredText hypertext style.  Each example contains "
"an indirect link, a direct link, a footnote/endnote, and bracketed text."
"  In HTML, each example should evaluate to::"
msgstr ""

#: ../../source/dev/problems.rst:808
msgid "No markup::"
msgstr ""

#: ../../source/dev/problems.rst:815
msgid ""
"StructuredText absolute/relative URI syntax "
"(\"text\":http://www.url.org)::"
msgstr ""

#: ../../source/dev/problems.rst:823
msgid ""
"Note that StructuredText does not recognize standalone URIs, forcing "
"doubling up as shown in the second line of the example above."
msgstr ""

#: ../../source/dev/problems.rst:827
msgid "StructuredText absolute-only URI syntax (\"text\", mailto:you@your.com)::"
msgstr ""

#: ../../source/dev/problems.rst:835
msgid "reStructuredText syntax::"
msgstr ""

#: ../../source/dev/problems.rst:843
msgid ""
"The bracketed text '[Publisher]' may be problematic with StructuredText "
"(syntax 2 & 3)."
msgstr ""

#: ../../source/dev/problems.rst:846
msgid ""
"reStructuredText's syntax (#4) is definitely the most readable.  The text"
" is separated from the link URI and the footnote, resulting in cleanly "
"readable text."
msgstr ""

